{
	"openapi": "3.0.0",
	"paths": {
		"/v1/customers": {
			"post": {
				"operationId": "customers-create",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst customer = await diagonal.customers.create({\n\temail: 'john.doe@example.com',\n\tname: 'John Doe'\n});",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Create a customer",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateCustomerParameters" } } }
				},
				"responses": {
					"201": {
						"description": "Created Customer object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Customer" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Customers"]
			}
		},
		"/v1/customers/{id}": {
			"get": {
				"operationId": "customers-get",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst customer = await diagonal.customers.get('customer_6_gEjD4WunRCA6K0');",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Get a customer",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Customer object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Customer" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Customer was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Customers"]
			},
			"put": {
				"operationId": "customers-update",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst updatedCustomer = await diagonal.customers.update('customer_6_gEjD4WunRCA6K0', {\n\temail: 'john.doe1@example.com',\n\treference: 'internal-customer-id'\n});",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Update a customer",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateCustomerParameters" } } }
				},
				"responses": {
					"200": {
						"description": "Updated Customer object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Customer" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Customer was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Customers"]
			}
		},
		"/v1/charges/{id}": {
			"get": {
				"operationId": "charges-get",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst charge = await diagonal.charges.get(\n\t'charge_x6P5fBhG_RBG1ZpoiRziGN3sz7sQRxwb'\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Get a charge",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Charge object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Charge" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Charge was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Charges"]
			},
			"post": {
				"operationId": "charges-update",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst updatedCharge = await diagonal.charges.update(\n\t'charge_x6P5fBhG_RBG1ZpoiRziGN3sz7sQRxwb',\n\t{ description: 'new description' }\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Update a charge",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateChargeParameters" } } }
				},
				"responses": {
					"200": {
						"description": "Updated Charge object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Charge" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Charge was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Charges"]
			}
		},
		"/v1/charges/{id}/capture": {
			"put": {
				"operationId": "charges-capture",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst charge = await diagonal.charges.capture(\n\t'charge_x6P5fBhG_RBG1ZpoiRziGN3sz7sQRxwb',\n\t{ v: 28, r: '0x28...', s: '0xf5...'}\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Capture a charge",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CaptureChargeParameters" } } }
				},
				"responses": {
					"200": {
						"description": "Captured Charge object when signature already captured",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Charge" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"201": {
						"description": "Captured Charge object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Charge" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Charge was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Charges"]
			}
		},
		"/v1/charges/{id}/void": {
			"put": {
				"operationId": "charges-void",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst charge = await diagonal.charges.void(\n\t'charge_x6P5fBhG_RBG1ZpoiRziGN3sz7sQRxwb'\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Void a charge",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Voided Charge object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Charge" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Charge was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Charges"]
			}
		},
		"/v1/charges": {
			"post": {
				"operationId": "charges-create",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst charge = await diagonal.charges.create({\n\tamount: '10',\n\tpayment_method_id: 'pm_abaJW5279WhxsVAX'\t\t\n}, {\n\tidempotency_key: 'Uakgb_J5m9g-0JDMbcJqL'\n}\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Create a charge",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateChargeParameters" } } }
				},
				"responses": {
					"201": {
						"description": "Created charge object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Charge" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Charges"]
			},
			"get": {
				"operationId": "charges-list",
				"summary": "List charges",
				"description": "List charges sorted by creation date, newest appearing first.",
				"parameters": [
					{
						"name": "page",
						"required": false,
						"in": "query",
						"example": 1,
						"description": "The page number to fetch.",
						"schema": { "minimum": 1, "default": 1, "type": "number" }
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"example": 50,
						"description": "The limit per page.",
						"schema": { "minimum": 1, "maximum": 50, "default": 20, "type": "number" }
					},
					{
						"name": "customer_id",
						"required": false,
						"in": "query",
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "Only return charges from the specified customer ID.",
						"schema": { "minLength": 25, "maxLength": 25, "type": "string" }
					},
					{
						"name": "subscription_id",
						"required": false,
						"in": "query",
						"example": "sub_LNlJW57B9WhzsVVP",
						"description": "Only return charges belonging to the specified subscription ID.",
						"schema": { "minLength": 20, "maxLength": 20, "type": "string" }
					},
					{
						"name": "payment_method_id",
						"required": false,
						"in": "query",
						"example": "pm_abaJW5279WhxsVAX",
						"description": "Only return charges created to the specified payment method ID.",
						"schema": { "minLength": 19, "maxLength": 19, "type": "string" }
					},
					{
						"name": "reference",
						"required": false,
						"in": "query",
						"description": "Only return charges with the specified reference value.",
						"example": "HQHoe5e3V",
						"schema": { "minLength": 1, "maxLength": 200, "type": "string" }
					},
					{
						"name": "status",
						"required": false,
						"in": "query",
						"description": "Only return charges with the specified status.",
						"example": "created",
						"schema": { "$ref": "#/components/schemas/ChargeStatus" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedCharge" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Charges"]
			}
		},
		"/v1/webhook/configs": {
			"post": {
				"operationId": "webhook-configs-create",
				"summary": "Create a webhook config",
				"description": "Create a new webhook config",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CreateWebhookConfigParameters" } }
					}
				},
				"responses": {
					"201": {
						"description": "The created Webhook Config with secret",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreatedWebhookConfig" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Webhook Config"]
			},
			"get": {
				"operationId": "webhook-configs-list",
				"summary": "List webhook configs",
				"description": "List all webhook configs available.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "The retrieved webhook configs",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/WebhookConfig" } }
							}
						},
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Webhook Config"]
			}
		},
		"/v1/webhook/configs/{id}": {
			"get": {
				"operationId": "webhook-configs-get",
				"summary": "Get a webhook config",
				"description": "Get a webhook config by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Webhook Config object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebhookConfig" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Webhook config was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Webhook Config"]
			},
			"put": {
				"operationId": "webhook-configs-update",
				"summary": "Update a webhook config",
				"description": "Update a webhook config if it exists",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/UpdateWebhookConfigParameters" } }
					}
				},
				"responses": {
					"200": {
						"description": "The updated Webhook Config",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebhookConfig" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Webhook config was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Webhook Config"]
			},
			"delete": {
				"operationId": "webhook-configs-delete",
				"summary": "Delete a webhook config",
				"description": "Delete a webhook config if it exists",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "The deleted Webhook Config",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebhookConfig" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Webhook config was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Webhook Config"]
			}
		},
		"/v1/checkout/sessions": {
			"post": {
				"operationId": "checkout-sessions-create",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst checkoutSession = await diagonal.checkout.sessions.create(\n\t{\n\t\tcancel_url: 'https://example.com/cancel',\n\t\tsuccess_url: 'https://example.com/success',\n\t\tamount: '10',\n\t\tsubscription: {\ninterval: 'month',\ninterval_count: 1\n\t\t}\n\t}\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Create a checkout session",
				"description": "Create a new checkout session",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CreateCheckoutSessionParameters" } }
					}
				},
				"responses": {
					"201": {
						"description": "Created Checkout Session object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CheckoutSession" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Checkout Sessions"]
			}
		},
		"/v1/checkout/sessions/{id}": {
			"get": {
				"operationId": "checkout-sessions-get",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst checkoutSession = await diagonal.checkout.sessions.get('cs_L8L86BFgGtkknu3d');",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Get a checkout session",
				"description": "Get a checkout session by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Checkout Session object",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						},
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CheckoutSession" } } }
					},
					"404": {
						"description": "Checkout session was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Checkout Sessions"]
			}
		},
		"/v1/checkout/sessions/{id}/expire": {
			"post": {
				"operationId": "checkout-sessions-expire",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst expiredCheckoutSession = await diagonal.checkout.sessions.expire('cs_L8L86BFgGtkknu3d');",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Expire a checkout session",
				"description": "Expire a checkout session by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Expired Checkout Session object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CheckoutSession" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Checkout session was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Checkout Sessions"]
			}
		},
		"/v1/webhook/logs": {
			"get": {
				"operationId": "webhook-logs-list",
				"summary": "List webhook execution logs",
				"description": "List webhook execution logs sorted by creation date, newest appearing first.",
				"parameters": [
					{
						"name": "page",
						"required": false,
						"in": "query",
						"example": 1,
						"description": "The page number to fetch.",
						"schema": { "minimum": 1, "default": 1, "type": "number" }
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"example": 50,
						"description": "The limit per page.",
						"schema": { "minimum": 1, "maximum": 50, "default": 20, "type": "number" }
					},
					{
						"name": "from",
						"required": false,
						"in": "query",
						"example": 1624580000,
						"description": "The start date of the range. Measured in seconds since the Unix epoch.",
						"schema": { "format": "uint32", "type": "integer" }
					},
					{
						"name": "to",
						"required": false,
						"in": "query",
						"example": 1624980000,
						"description": "The end date of the range. Measured in seconds since the Unix epoch.",
						"schema": { "format": "uint32", "type": "integer" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": {
							"application/json": { "schema": { "$ref": "#/components/schemas/PaginatedWebhookExecutionLog" } }
						},
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Webhook Logs"]
			}
		},
		"/v1/subscriptions": {
			"get": {
				"operationId": "subscriptions-list",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst subscriptions = await diagonal.subscriptions.list(\n\t{\n\t\t'customer_id': 'cus_123'\n\t}\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "List subscriptions",
				"description": "List subscriptions sorted by creation date, newest appearing first.",
				"parameters": [
					{
						"name": "page",
						"required": false,
						"in": "query",
						"example": 1,
						"description": "The page number to fetch.",
						"schema": { "minimum": 1, "default": 1, "type": "number" }
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"example": 50,
						"description": "The limit per page.",
						"schema": { "minimum": 1, "maximum": 50, "default": 20, "type": "number" }
					},
					{
						"name": "reference",
						"required": false,
						"in": "query",
						"description": "Only return subscriptions with the specified reference",
						"example": null,
						"schema": { "minLength": 1, "maxLength": 200, "type": "string" }
					},
					{
						"name": "customer_id",
						"required": false,
						"in": "query",
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "Only return subscriptions belonging to the specified customer ID.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedSubscription" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Subscriptions"]
			}
		},
		"/v1/subscriptions/{id}": {
			"get": {
				"operationId": "subscriptions-get",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst subscription = await diagonal.subscriptions.get(\n\t'sub_WICxVHyNz1W_f9qT'\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Get a subscription",
				"description": "Gets a subscription by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Subscription object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Subscription" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Subscription was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Subscriptions"]
			},
			"post": {
				"operationId": "subscriptions-update",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst updatedSubscription = await diagonal.subscriptions.update(\n\t'sub_WICxVHyNz1W_f9qT',\n\t{\n\t\tbilling_amount: '15'\n\t}\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Update a subscription",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/UpdateSubscriptionParameters" } }
					}
				},
				"responses": {
					"200": {
						"description": "The updated Subscription object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Subscription" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Subscription was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Subscriptions"]
			}
		},
		"/v1/subscriptions/{id}/cancel": {
			"post": {
				"operationId": "subscriptions-cancel",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst canceledSubscription = await diagonal.subscriptions.cancel(\n\t'sub_WICxVHyNz1W_f9qT'\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Cancel a subscription",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CancelSubscriptionParameters" } }
					}
				},
				"responses": {
					"200": {
						"description": "The canceled Subscription object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Subscription" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Subscription was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Subscriptions"]
			}
		},
		"/v1/events/{id}": {
			"get": {
				"operationId": "events-get",
				"summary": "Get an event",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "The retrieved event",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Event" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Events"]
			}
		},
		"/v1/events": {
			"get": {
				"operationId": "events-list",
				"summary": "List events",
				"description": "List events sorted by creation date, newest appearing first.",
				"parameters": [
					{
						"name": "page",
						"required": false,
						"in": "query",
						"example": 1,
						"description": "The page number to fetch.",
						"schema": { "minimum": 1, "default": 1, "type": "number" }
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"example": 50,
						"description": "The limit per page.",
						"schema": { "minimum": 1, "maximum": 50, "default": 20, "type": "number" }
					},
					{
						"name": "from",
						"required": false,
						"in": "query",
						"example": 1624580000,
						"description": "The start date of the range. Measured in seconds since the Unix epoch.",
						"schema": { "format": "uint32", "type": "integer" }
					},
					{
						"name": "to",
						"required": false,
						"in": "query",
						"example": 1624980000,
						"description": "The end date of the range. Measured in seconds since the Unix epoch.",
						"schema": { "format": "uint32", "type": "integer" }
					}
				],
				"responses": {
					"200": {
						"description": "",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedEvent" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Events"]
			}
		},
		"/v1/payment/methods/{id}": {
			"get": {
				"operationId": "payment-methods-get",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst payment_method = await diagonal.payment.methods.get(\n\t'pm_WICxVHyNz1W_f9qT'\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Get a payment method",
				"description": "Retrieve a payment method by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Payment method object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaymentMethod" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Payment method was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Payment Methods"]
			},
			"post": {
				"operationId": "payment-methods-update",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst payment_method = await diagonal.payment.methods.update(\n\t'pm_WICxVHyNz1W_f9qT',\n                {\n                    'name': 'Wallet 3'\n                }\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Update a payment method",
				"description": "Update a payment method by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/UpdatePaymentMethodParameters" } }
					}
				},
				"responses": {
					"200": {
						"description": "The updated payment method object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaymentMethod" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Payment method was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Payment Methods"]
			},
			"delete": {
				"operationId": "payment-methods-delete",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst deleted_method = await diagonal.payment.methods.delete(\n\t'pm_WICxVHyNz1W_f9qT'\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Delete a payment method",
				"description": "Delete a payment method by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "The deleted payment method object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaymentMethod" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Payment method was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Payment Methods"]
			}
		},
		"/v1/payment/methods": {
			"get": {
				"operationId": "payment-methods-list",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst payment_methods = await diagonal.payment.methods.list(\n\t'pm_WICxVHyNz1W_f9qT',\n                {\n                    'customer_id': 'cus_123'\n                }\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "List payment methods",
				"description": "List payment methods sorted by creation date, newest appearing first.",
				"parameters": [
					{
						"name": "page",
						"required": false,
						"in": "query",
						"example": 1,
						"description": "The page number to fetch.",
						"schema": { "minimum": 1, "default": 1, "type": "number" }
					},
					{
						"name": "limit",
						"required": false,
						"in": "query",
						"example": 50,
						"description": "The limit per page.",
						"schema": { "minimum": 1, "maximum": 50, "default": 20, "type": "number" }
					},
					{
						"name": "reference",
						"required": false,
						"in": "query",
						"description": "External reference for the entity.",
						"example": null,
						"schema": { "minLength": 1, "maxLength": 200, "type": "string" }
					},
					{
						"name": "customer_id",
						"required": false,
						"in": "query",
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "The ID of the customer that the payment method belongs to.",
						"schema": { "type": "string" }
					}
				],
				"responses": {
					"200": {
						"description": "The found payment method objects",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/PaginatedPaymentMethod" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Payment Methods"]
			}
		},
		"/v1/setup/sessions": {
			"post": {
				"operationId": "setup-sessions-create",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst setupSession = await diagonal.setup.sessions.create(\n\t{\n\t\tcancel_url: 'https://example.com/cancel',\n\t\tsuccess_url: 'https://example.com/success',\n                    customer_id: 'customer_123\n\t}\n);",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Create a setup session",
				"description": "Create a new setup session to add or update a payment method",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CreateSetupSessionParameters" } }
					}
				},
				"responses": {
					"201": {
						"description": "Created Setup Session object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/SetupSession" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Setup Sessions"]
			}
		},
		"/v1/setup/sessions/{id}": {
			"get": {
				"operationId": "setup-sessions-get",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst setupSession = await diagonal.setup.sessions.get('setup_L8LANBFgX1kknu3d');",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Get a setup session",
				"description": "Get a setup session by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Setup Session object",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						},
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/SetupSession" } } }
					},
					"404": {
						"description": "Setup session was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Setup Sessions"]
			}
		},
		"/v1/setup/sessions/{id}/expire": {
			"post": {
				"operationId": "setup-sessions-expire",
				"x-code-samples": [
					{
						"code": "const { Diagonal } = require('diagonal');\nconst diagonal = new Diagonal('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP')\n\nconst expiredSetupSession = await diagonal.setup.sessions.expire('setup_L8L86BFgGtkknu3d');",
						"install": "npm install diagonal",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Expire a setup session",
				"description": "Expire a setup session by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Expired Setup Session object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/SetupSession" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Setup session was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Setup Sessions"]
			}
		}
	},
	"info": { "title": "API", "description": "Diagonal API", "version": "1.0", "contact": {} },
	"tags": [],
	"servers": [{ "url": "https://api.test.diagonal.finance" }],
	"components": {
		"securitySchemes": {
			"X-API-Key": { "type": "apiKey", "in": "header", "name": "X-API-Key", "description": "Diagonal API Key" }
		},
		"schemas": {
			"ChargeStatus": {
				"type": "string",
				"enum": [
					"created",
					"waiting_for_signature",
					"processing",
					"confirmed",
					"finalized",
					"pending",
					"failed",
					"voided"
				],
				"properties": {}
			},
			"ChargeReason": {
				"type": "string",
				"enum": [
					"subscription_creation",
					"subscription_due",
					"subscription_update",
					"subscription_cancel",
					"subscription",
					"payment"
				],
				"properties": {}
			},
			"Token": { "type": "string", "enum": ["dai", "usdc"], "properties": {} },
			"Chain": {
				"type": "string",
				"enum": ["ethereum", "polygon", "arbitrum", "optimism", "goerli"],
				"properties": {}
			},
			"ChargeFailureReason": {
				"type": "string",
				"enum": ["insufficient_spending_allowance", "insufficient_balance", "address_blacklisted_by_usdc"],
				"properties": {}
			},
			"ECDSASignature": {
				"type": "object",
				"properties": {
					"r": {
						"type": "string",
						"example": "0x1234567890123456789012345678901234567890123456789012345678901234",
						"description": "The r property of the v,r,s signature."
					},
					"s": {
						"type": "string",
						"example": "0x1234567890123456789012345678901234567890123456789012345678901234",
						"description": "The s property of the v,r,s signature."
					},
					"v": {
						"type": "integer",
						"example": 28,
						"description": "The v property of the v,r,s signature.",
						"minimum": 27,
						"maximum": 28
					}
				},
				"required": ["v", "r", "s"]
			},
			"EventType": {
				"type": "string",
				"enum": [
					"subscription.created",
					"subscription.active",
					"subscription.updated",
					"subscription.canceled",
					"charge.created",
					"charge.confirmed",
					"charge.finalized",
					"charge.attempt_failed",
					"charge.failed",
					"signature.charge.request",
					"checkout_session.complete_request",
					"setup_session.completed"
				],
				"properties": {}
			},
			"CheckoutSessionMode": { "type": "string", "enum": ["payment", "subscription"], "properties": {} },
			"RecurringInterval": { "type": "string", "enum": ["week", "month", "year"], "properties": {} },
			"CreateCheckoutSessionSubscription": {
				"type": "object",
				"properties": {
					"interval": {
						"example": "month",
						"description": "The interval specifies the billing schedule, which can be week, month, or year.",
						"$ref": "#/components/schemas/RecurringInterval"
					},
					"interval_count": {
						"type": "integer",
						"minimum": 1,
						"maximum": 24,
						"example": 1,
						"description": "Frequency of subscription billings, measured in intervals. For instance, if the interval is set to 'month' and the interval_count is 3, the subscriber will be billed every 3 months."
					},
					"interval_cycle_anchor": {
						"type": "integer",
						"nullable": false,
						"example": 1665053395,
						"description": "The time in seconds since the Unix epoch when the interval cycle of the subscription is meant to anchor. Minimum is 5 minutes in the future, otherwise fallbacks to request time.\n\nFor more details about how this is used, visit the guide at https://docs.diagonal.finance/docs/specify-interval-cycle",
						"format": "uint32"
					},
					"prorate": {
						"type": "boolean",
						"example": true,
						"description": "Whether or not the first charge of the subscription is meant to be prorated. Used along with the `interval_cycle_anchor` parameter."
					},
					"trial_days": {
						"type": "integer",
						"default": 0,
						"minimum": 0,
						"maximum": 730,
						"example": 7,
						"description": "Number of trial days the subscription is eligible for.",
						"nullable": false
					}
				},
				"required": ["interval", "interval_count"]
			},
			"CreateCheckoutPaymentOptions": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"description": "Amount to pay for this combination of Chain(s) and Token(s).",
						"example": "10"
					},
					"chains": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/Chain" },
						"description": "The chains the user can select.",
						"example": ["ethereum"]
					},
					"tokens": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/Token" },
						"description": "The tokens the user can select.",
						"example": ["dai"]
					}
				}
			},
			"CheckoutSessionSubscription": {
				"type": "object",
				"properties": {
					"interval": {
						"example": "month",
						"description": "The interval specifies the billing schedule, which can be week, month, or year.",
						"$ref": "#/components/schemas/RecurringInterval"
					},
					"interval_count": {
						"type": "integer",
						"minimum": 1,
						"maximum": 24,
						"example": 1,
						"description": "Frequency of subscription billings, measured in intervals. For instance, if the interval is set to 'month' and the interval_count is 3, the subscriber will be billed every 3 months."
					},
					"interval_cycle_anchor": {
						"type": "integer",
						"nullable": true,
						"example": 1665053395,
						"description": "The time in seconds since the Unix epoch when the interval cycle of the subscription is meant to anchor. Minimum is 5 minutes in the future, otherwise fallbacks to request time.\n\nFor more details about how this is used, visit the guide at https://docs.diagonal.finance/docs/specify-interval-cycle",
						"format": "uint32"
					},
					"prorate": {
						"type": "boolean",
						"example": true,
						"description": "Whether or not the first charge of the subscription is meant to be prorated. Used along with the `interval_cycle_anchor` parameter."
					},
					"trial_days": {
						"type": "integer",
						"default": 0,
						"minimum": 0,
						"maximum": 730,
						"example": 7,
						"description": "Number of trial days the subscription is eligible for."
					}
				},
				"required": ["interval", "interval_count", "interval_cycle_anchor", "trial_days"]
			},
			"CheckoutPaymentOptions": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"description": "Amount to pay for this combination of Chain(s) and Token(s).",
						"example": "10"
					},
					"chains": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/Chain" },
						"description": "The chains the user can select.",
						"example": ["ethereum"]
					},
					"tokens": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/Token" },
						"description": "The tokens the user can select.",
						"example": ["dai"]
					}
				}
			},
			"CheckoutSessionStatus": {
				"type": "string",
				"enum": ["open", "expired", "complete", "in_progress"],
				"properties": {}
			},
			"SubscriptionStatus": {
				"type": "string",
				"enum": ["incomplete", "trialing", "active", "past_due", "canceled", "canceling", "expired"],
				"properties": {}
			},
			"SubscriptionCancelReason": {
				"type": "string",
				"enum": ["max_charge_attempts_reached", "address_blacklisted_by_usdc"],
				"properties": {}
			},
			"PaymentMethodType": { "type": "string", "enum": ["wallet"], "properties": {} },
			"UpdateChargeBehaviour": { "type": "string", "enum": ["immediate", "next_period"], "properties": {} },
			"CancelChargeBehaviour": { "type": "string", "enum": ["immediate", "none"], "properties": {} },
			"PaymentOptions": {
				"type": "object",
				"properties": {
					"chains": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/Chain" },
						"description": "The chains the user can select.",
						"example": ["ethereum"]
					},
					"tokens": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/Token" },
						"description": "The tokens the user can select.",
						"example": ["dai"]
					}
				}
			},
			"SetupSessionStatus": {
				"type": "string",
				"enum": ["open", "expired", "complete", "in_progress"],
				"properties": {}
			},
			"SignatureType": { "type": "string", "enum": ["charge"], "properties": {} },
			"ChainId": { "type": "integer", "enum": [1, 5, 137, 420, 421613, 10, 42161], "properties": {} },
			"Objects": {
				"type": "string",
				"enum": [
					"charge",
					"customer",
					"signature",
					"subscription",
					"webhook_config",
					"webhook_log",
					"event",
					"checkout_session",
					"payment_method",
					"setup_session"
				],
				"properties": {}
			},
			"ErrorCategory": {
				"type": "string",
				"enum": [
					"internal",
					"authorization",
					"organization",
					"subscription",
					"checkout_session",
					"charge",
					"event",
					"customer",
					"webhook_log",
					"webhook_config",
					"payment_method",
					"setup_session"
				],
				"properties": {}
			},
			"ErrorType": { "type": "string", "enum": ["internal", "request"], "properties": {} },
			"Customer": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "Unique identifier for the customer."
					},
					"object": {
						"type": "string",
						"enum": ["customer"],
						"default": "customer",
						"example": "customer",
						"minimum": 1
					},
					"created_at": {
						"type": "integer",
						"example": 1665054008,
						"description": "The time when the customer was created. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"email": {
						"type": "string",
						"nullable": true,
						"example": "john@example.com",
						"description": "The customer's email address."
					},
					"metadata": {
						"type": "object",
						"nullable": true,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"name": {
						"type": "string",
						"minLength": 1,
						"nullable": true,
						"example": "John",
						"description": "The customer's full name."
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": true,
						"description": "An external reference for the customer, i.e. the unique customer ID you use on your end",
						"example": null
					}
				},
				"required": ["reference", "metadata", "id", "object", "email", "name", "created_at"]
			},
			"CreateCustomerParameters": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "The customer's unique ID. If not provided, one is generated automatically."
					},
					"email": { "type": "string", "example": "john@example.com", "description": "The customer's email address." },
					"metadata": {
						"type": "object",
						"nullable": false,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"name": { "type": "string", "minLength": 1, "example": "John", "description": "The customer's full name." },
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": false,
						"description": "External reference for the entity.",
						"example": null
					}
				}
			},
			"UpdateCustomerParameters": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"example": "jane@example.com",
						"description": "The new customer's email address."
					},
					"metadata": {
						"type": "object",
						"nullable": false,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"name": { "type": "string", "example": "Jane", "description": "The new customer's full name." },
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": false,
						"description": "The new external reference for the customer.",
						"example": null
					}
				}
			},
			"Transaction": {
				"type": "object",
				"properties": {
					"explorer_url": {
						"type": "string",
						"example": "https://goerli.etherscan.io/tx/0x17134e4a80e688d4c6d754d674bb06f3a65996dd1ec95ebe41fdea1c9e4380cd",
						"description": "The URL to the chain explorer for the transaction hash."
					},
					"hash": {
						"type": "string",
						"example": "0x17134e4a80e688d4c6d754d674bb06f3a65996dd1ec95ebe41fdea1c9e4380cd",
						"description": "The ethereum transaction hash of the charge."
					}
				},
				"required": ["explorer_url", "hash"]
			},
			"Charge": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "charge_x6P5fBhG_RBG1ZpoiRziGN3sz7sQRxwb",
						"description": "Unique identifier for the charge."
					},
					"object": { "type": "string", "enum": ["charge"], "default": "charge", "example": "charge", "minimum": 1 },
					"status": {
						"example": "finalized",
						"description": "The status of the charge.",
						"$ref": "#/components/schemas/ChargeStatus"
					},
					"amount": { "type": "string", "example": "10.0", "description": "The amount to be charged." },
					"attempt_count": {
						"type": "number",
						"example": 1,
						"description": "The number of times the charge has been attempted."
					},
					"chain": {
						"example": "ethereum",
						"description": "The chain that the charge is being paid in.",
						"$ref": "#/components/schemas/Chain"
					},
					"confirmed_at": {
						"type": "integer",
						"nullable": true,
						"example": 1665054008,
						"description": "The time when the charge was confirmed. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"created_at": {
						"type": "integer",
						"example": null,
						"description": "The time when the charge was created. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"customer_id": {
						"type": "string",
						"nullable": true,
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "The ID of the customer that the charge is related to."
					},
					"description": {
						"type": "string",
						"nullable": true,
						"example": null,
						"description": "A description for the charge.\n\nWhen charges are created automatically due to some subscription event, this field is initialised automatically with a human readable description, e.g.: Subscription creation of 50.0 USDC every month."
					},
					"failed_at": {
						"type": "integer",
						"nullable": true,
						"example": null,
						"description": "The time when the charge was failed. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"finalized_at": {
						"type": "integer",
						"nullable": true,
						"example": 1665054030,
						"description": "The time when the charge was finalized. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"last_attempt_at": {
						"type": "integer",
						"nullable": true,
						"example": null,
						"description": "The time when the charge was last attempted. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"last_attempt_failure_reason": {
						"nullable": true,
						"example": null,
						"description": "The failure reason for the last attempt.",
						"$ref": "#/components/schemas/ChargeFailureReason"
					},
					"metadata": {
						"type": "object",
						"nullable": true,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"name": { "type": "string", "nullable": true, "example": null, "description": "A name for the charge." },
					"next_attempt_at": {
						"type": "integer",
						"nullable": true,
						"example": null,
						"description": "The time when the charge is going to be attempted again. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"payment_method_id": {
						"type": "string",
						"nullable": true,
						"example": "pm_abaJW5279WhxsVAX",
						"description": "The ID of the payment method that the charge is related with."
					},
					"reason": {
						"nullable": true,
						"example": "subscription_due",
						"description": "The reason for creating the charge. Set automatically by Diagonal.",
						"$ref": "#/components/schemas/ChargeReason"
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": true,
						"description": "External reference for the entity.",
						"example": null
					},
					"signature_id": {
						"type": "string",
						"example": "sign_d7wCHQHovoe5e3VI",
						"description": "The ID of the signature used for capturing the charge."
					},
					"signed_at": {
						"type": "integer",
						"nullable": true,
						"example": 1665054004,
						"description": "The time when the charge was signed. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"source_address": {
						"type": "string",
						"example": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B",
						"description": "The ethereum address of the user that is paying for the charge."
					},
					"subscription_id": {
						"type": "string",
						"nullable": true,
						"example": "sub_LNlJW57B9WhzsVVP",
						"description": "The ID of the subscription that the charge is related with."
					},
					"token": {
						"example": "usdc",
						"description": "The token that the charge is being paid in. All amounts are in this token.",
						"$ref": "#/components/schemas/Token"
					},
					"transaction": {
						"nullable": true,
						"description": "The transaction details related to the charge.",
						"allOf": [{ "$ref": "#/components/schemas/Transaction" }]
					},
					"voided_at": {
						"type": "integer",
						"nullable": true,
						"example": null,
						"description": "The time when the charge was voided. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					}
				},
				"required": [
					"reference",
					"metadata",
					"name",
					"description",
					"id",
					"object",
					"status",
					"reason",
					"subscription_id",
					"payment_method_id",
					"customer_id",
					"source_address",
					"amount",
					"token",
					"chain",
					"signature_id",
					"transaction",
					"attempt_count",
					"next_attempt_at",
					"last_attempt_at",
					"last_attempt_failure_reason",
					"signed_at",
					"confirmed_at",
					"finalized_at",
					"failed_at",
					"voided_at",
					"created_at"
				]
			},
			"UpdateChargeParameters": {
				"type": "object",
				"properties": {
					"description": {
						"type": "string",
						"example": null,
						"description": "A description for the charge.\n\nWhen charges are created automatically due to some subscription event, this field is initialised automatically with a human readable description, e.g.: Subscription creation of 50.0 USDC every month."
					},
					"metadata": {
						"type": "object",
						"nullable": false,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"name": { "type": "string", "example": null, "description": "A name for the charge." },
					"payment_method_id": {
						"type": "string",
						"example": "pm_abaJW5279WhxsVAX",
						"description": "The ID of the new payment method that will be used for this charge. It must be of the same type. For `wallets`, the `token` and `chain` must be the same."
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": false,
						"description": "External reference for the entity.",
						"example": null
					}
				}
			},
			"CaptureChargeParameters": {
				"type": "object",
				"properties": {
					"signature": {
						"title": "ECDSA signature",
						"description": "Charge ECDSA signature in v,r,s format. This is used in order to execute the on-chain charge.\n\nFor more information about how to generate these, check the guide in https://docs.diagonal.finance/reference/signatures-charge.",
						"allOf": [{ "$ref": "#/components/schemas/ECDSASignature" }]
					}
				},
				"required": ["signature"]
			},
			"CreateChargeParameters": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"description": "Amount to charge the provided payment method. Amount will be in the Token the payment method is registered for.",
						"example": "10"
					},
					"description": {
						"type": "string",
						"minLength": 1,
						"maxLength": 300,
						"example": "Subscription service for November 2023",
						"description": "A description for the charge.\n\nWhen charges are created automatically due to some subscription event, this field is initialised automatically with a human readable description, e.g.: Subscription creation of 50.0 USDC every month."
					},
					"metadata": {
						"type": "object",
						"nullable": false,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"payment_method_id": {
						"type": "string",
						"example": "pm_abaJW5279WhxsVAX",
						"description": "Unique identifier for the payment method."
					},
					"reason": {
						"default": "subscription",
						"example": "subscription",
						"description": "The reason for creating the charge. A failed charge is reattempted based on a policy specific to the reason, ex. retries multiple times for \"subscription\" reason and does not retry for \"payment\" reason. Defaults to \"subscription\".",
						"$ref": "#/components/schemas/ChargeReason"
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": false,
						"description": "External reference for the entity.",
						"example": null
					}
				},
				"required": ["amount", "payment_method_id"]
			},
			"PaginatedCharge": {
				"type": "object",
				"properties": {
					"data": {
						"description": "The results in the given page.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/Charge" }
					},
					"page": { "type": "number", "example": 1, "description": "Current page." },
					"page_count": { "type": "number", "example": 1, "description": "Total page count." },
					"results_count": {
						"type": "number",
						"example": 1,
						"description": "Total number of results for the given query."
					},
					"results_per_page": { "type": "number", "example": 20, "description": "Results per page." }
				},
				"required": ["page", "page_count", "results_per_page", "results_count", "data"]
			},
			"CreatedWebhookConfig": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "wconfig_3E0tXcp4p3cbsh8POoU0",
						"description": "Unique identifier for the webhook config."
					},
					"object": {
						"type": "string",
						"enum": ["webhook_config"],
						"default": "webhook_config",
						"example": "webhook_config",
						"minimum": 1
					},
					"created_at": {
						"type": "integer",
						"example": 1624980000,
						"description": "The time when the webhook config was created. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"events": {
						"type": "array",
						"example": ["charge.confirmed", "charge.failed"],
						"description": "Events that the webhook endpoint will be triggered for.",
						"items": { "$ref": "#/components/schemas/EventType" }
					},
					"metadata": {
						"type": "object",
						"nullable": true,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": true,
						"description": "External reference for the entity.",
						"example": null
					},
					"secret": {
						"type": "string",
						"example": "wsecret_YC20fhSM_q9tdQKxfggXursa4JAuEh55giGALTwl",
						"description": "The webhook secret used to generate webhook signatures. Only returned at creation."
					},
					"url": {
						"type": "string",
						"example": "https://example.com/webhook",
						"description": "The URL that should be triggered by Diagonal for delivering the webhook event.",
						"format": "url"
					}
				},
				"required": ["reference", "metadata", "id", "object", "url", "events", "created_at", "secret"]
			},
			"CreateWebhookConfigParameters": {
				"type": "object",
				"properties": {
					"events": {
						"type": "array",
						"example": ["charge.confirmed", "charge.failed"],
						"description": "Events that the webhook endpoint will be triggered for.",
						"items": { "$ref": "#/components/schemas/EventType" }
					},
					"metadata": {
						"type": "object",
						"nullable": false,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": false,
						"description": "External reference for the entity.",
						"example": null
					},
					"url": {
						"type": "string",
						"example": "http://example.com/webhook",
						"description": "The URL that should be triggered by Diagonal for delivering the webhook event.",
						"format": "url"
					}
				},
				"required": ["url", "events"]
			},
			"WebhookConfig": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "wconfig_3E0tXcp4p3cbsh8POoU0",
						"description": "Unique identifier for the webhook config."
					},
					"object": {
						"type": "string",
						"enum": ["webhook_config"],
						"default": "webhook_config",
						"example": "webhook_config",
						"minimum": 1
					},
					"created_at": {
						"type": "integer",
						"example": 1624980000,
						"description": "The time when the webhook config was created. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"events": {
						"type": "array",
						"example": ["charge.confirmed", "charge.failed"],
						"description": "Events that the webhook endpoint will be triggered for.",
						"items": { "$ref": "#/components/schemas/EventType" }
					},
					"metadata": {
						"type": "object",
						"nullable": true,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": true,
						"description": "External reference for the entity.",
						"example": null
					},
					"url": {
						"type": "string",
						"example": "https://example.com/webhook",
						"description": "The URL that should be triggered by Diagonal for delivering the webhook event.",
						"format": "url"
					}
				},
				"required": ["reference", "metadata", "id", "object", "url", "events", "created_at"]
			},
			"UpdateWebhookConfigParameters": {
				"type": "object",
				"properties": {
					"events": {
						"type": "array",
						"example": ["charge.confirmed", "charge.failed"],
						"description": "Events that the webhook endpoint will be triggered for.",
						"items": { "$ref": "#/components/schemas/EventType" }
					},
					"metadata": {
						"type": "object",
						"nullable": false,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": false,
						"description": "External reference for the entity.",
						"example": null
					},
					"url": {
						"type": "string",
						"example": "http://example.com/webhook2",
						"description": "The URL that should be triggered by Diagonal for delivering the webhook event.",
						"format": "url"
					}
				},
				"required": ["url", "events"]
			},
			"CheckoutSession": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "cs_qetOkUQV2vttGpCG",
						"description": "Unique identifier for the checkout session."
					},
					"object": {
						"type": "string",
						"enum": ["checkout_session"],
						"default": "checkout_session",
						"example": "checkout_session",
						"minimum": 1
					},
					"status": {
						"example": "open",
						"description": "Status for the checkout session.",
						"$ref": "#/components/schemas/CheckoutSessionStatus"
					},
					"amount": { "type": "string", "example": "10.0", "description": "Checkout session amount." },
					"cancel_url": {
						"type": "string",
						"nullable": true,
						"example": "https://example.com/checkout/cancel",
						"description": "URL where the user will be redirected after the checkout session is cancelled.",
						"format": "url"
					},
					"customer_id": {
						"type": "string",
						"nullable": true,
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "The ID of the customer that the checkout session is related to."
					},
					"expires_at": {
						"type": "integer",
						"example": 1665053395,
						"description": "The time when the checkout session gets expired. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"metadata": {
						"type": "object",
						"nullable": true,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"mode": {
						"default": "subscription",
						"example": "subscription",
						"description": "Mode of the checkout. `subscription` for recurring payments, or `payment` for one-time payments.",
						"$ref": "#/components/schemas/CheckoutSessionMode"
					},
					"payment_method_id": {
						"type": "string",
						"nullable": true,
						"example": "pm_abaJW5279WhxsVAX",
						"description": "The ID of the payment method that the checkout session is related to."
					},
					"payment_options": {
						"nullable": true,
						"example": [{ "tokens": ["dai"], "chains": ["ethereum"], "amount": "12.0" }],
						"description": "Payment options for the checkout session.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/CheckoutPaymentOptions" }
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": true,
						"description": "External reference for the entity.",
						"example": null
					},
					"subscription": {
						"example": { "interval": "month", "interval_count": 1 },
						"description": "Subscription information for the checkout session. Only available when \"mode\" is \"subscription\".",
						"nullable": true,
						"allOf": [{ "$ref": "#/components/schemas/CheckoutSessionSubscription" }]
					},
					"subscription_id": {
						"type": "string",
						"nullable": true,
						"example": "sub_w2wCHQHaaoe5e3RM",
						"description": "The ID of the subscription that the checkout session is related to."
					},
					"success_url": {
						"type": "string",
						"nullable": true,
						"example": "https://example.com/checkout/success",
						"description": "URL where the user will be redirected after the checkout session is completed.",
						"format": "url"
					},
					"url": {
						"type": "string",
						"example": "https://checkout.diagonal.finance/cs_qetOkUQV2vttGpCG",
						"description": "URL for the checkout session.",
						"format": "url"
					}
				},
				"required": [
					"reference",
					"metadata",
					"id",
					"object",
					"success_url",
					"cancel_url",
					"amount",
					"subscription_id",
					"payment_method_id",
					"payment_options",
					"url",
					"status",
					"expires_at",
					"mode",
					"customer_id"
				]
			},
			"CreateCheckoutSessionParameters": {
				"type": "object",
				"properties": {
					"amount": { "type": "string", "example": "10", "description": "Total amount to pay for the subscription." },
					"cancel_url": {
						"type": "string",
						"example": "https://example.com/checkout/cancel",
						"description": "URL where the user will be redirected after the checkout session is cancelled.",
						"format": "url"
					},
					"customer": {
						"example": null,
						"description": "The customer the checkout session will be related to.\n\n When the ID parameter is not provided, or not already assigned to an existing customer, the Customer is created. Otherwise, when the ID relates to an exiting Customer, the customer is updated with the provided values.",
						"allOf": [{ "$ref": "#/components/schemas/CreateCustomerParameters" }]
					},
					"expires_at": {
						"type": "integer",
						"example": 1665053395,
						"description": "The time in seconds since the Unix epoch when the Checkout Session should expire. By default is 24h.",
						"format": "uint32"
					},
					"metadata": {
						"type": "object",
						"nullable": false,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.\n\nThe metadata field in the subscription created through this checkout session will be initialised with this value.",
						"example": { "plan_id": "subscription-plan-01", "internal_plan_id": "crypto-plan-01" },
						"maxProperties": 20
					},
					"mode": {
						"default": "subscription",
						"example": "subscription",
						"description": "Mode for the checkout. Select `subscription` for recurring payments, or `payment` for one-time payments.",
						"$ref": "#/components/schemas/CheckoutSessionMode"
					},
					"payment_options": {
						"description": "Payment options for the checkout session. If none provided, all payment options set in the organization configuration will be used.\n\nFor each configuration, either chains or tokens must be provided.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/CreateCheckoutPaymentOptions" }
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": false,
						"description": "External reference for the entity.\n\nThe reference field in the subscription created through this checkout session will be initialised with this value. You can use it to identify the plan or product the customer has subscribed to.",
						"example": "subscription-plan-01"
					},
					"subscription": {
						"example": { "interval": "month", "interval_count": 1 },
						"description": "Subscription information for the checkout session. Only required if mode is \"subscription\".",
						"allOf": [{ "$ref": "#/components/schemas/CreateCheckoutSessionSubscription" }]
					},
					"success_url": {
						"type": "string",
						"example": "https://example.com/checkout/success",
						"description": "URL where the user will be redirected after the checkout session is completed.",
						"format": "url"
					}
				},
				"required": ["amount"]
			},
			"WebhookExecutionLog": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "wexec_LNlJW57B9WhzsVVP",
						"description": "Unique identifier for the webhook execution log."
					},
					"object": {
						"type": "string",
						"enum": ["webhook_log"],
						"default": "webhook_log",
						"example": "webhook_log",
						"minimum": 1
					},
					"attempt": {
						"type": "integer",
						"example": 1,
						"description": "The attempt number for the given event and webhook config."
					},
					"event_id": {
						"type": "string",
						"example": "event_FenzzAXzOv1O5-GWFTAjCNCW9bwp29eK",
						"description": "The ID of the webhook event."
					},
					"next_attempt_at": {
						"type": "integer",
						"nullable": true,
						"example": 1633046400,
						"description": "The time when the next attempt will be made. Only set when a non HTTP 200 status code is returned from the execution. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"occured_at": {
						"type": "integer",
						"example": 1633046400,
						"description": "The time when the webhook was executed. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"response_body": {
						"type": "string",
						"nullable": true,
						"example": "{\"status\": \"success\"}",
						"description": "Stringified HTTP response body."
					},
					"response_status_code": {
						"type": "integer",
						"example": 200,
						"description": "The HTTP response status code."
					},
					"response_status_text": {
						"type": "string",
						"example": "OK",
						"description": "The HTTP response status text."
					},
					"url": {
						"type": "string",
						"example": "http://example.com/webhook",
						"description": "The URL that was triggered for delivering the webhook.",
						"format": "url"
					}
				},
				"required": [
					"id",
					"object",
					"event_id",
					"url",
					"response_status_code",
					"response_status_text",
					"response_body",
					"next_attempt_at",
					"attempt",
					"occured_at"
				]
			},
			"PaginatedWebhookExecutionLog": {
				"type": "object",
				"properties": {
					"data": {
						"description": "The results in the given page.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/WebhookExecutionLog" }
					},
					"page": { "type": "number", "example": 1, "description": "Current page." },
					"page_count": { "type": "number", "example": 1, "description": "Total page count." },
					"results_count": {
						"type": "number",
						"example": 1,
						"description": "Total number of results for the given query."
					},
					"results_per_page": { "type": "number", "example": 20, "description": "Results per page." }
				},
				"required": ["page", "page_count", "results_per_page", "results_count", "data"]
			},
			"SubscriptionBalance": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"example": "0.0",
						"description": "The balance amount in the token being used for the subscription."
					},
					"updated_at": {
						"type": "integer",
						"example": 1632960000,
						"description": "The time when the balance was last updated. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					}
				},
				"required": ["amount", "updated_at"]
			},
			"SubscriptionBilling": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"example": "50.0",
						"description": "The amount in the subscription token that will be charged each billing interval."
					},
					"interval": {
						"example": "month",
						"description": "The interval specifies the billing schedule, which can be week, month, or year.",
						"$ref": "#/components/schemas/RecurringInterval"
					},
					"interval_count": {
						"type": "integer",
						"minimum": 1,
						"maximum": 24,
						"example": 1,
						"description": "Interval count refers to the frequency of subscription billings, measured in intervals. For instance, if the interval is set to 'month' and the interval_count is 3, the subscriber will be billed every 3 months."
					}
				},
				"required": ["amount", "interval", "interval_count"]
			},
			"SubscriptionLastPayment": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"example": "50.0",
						"description": "The amount in the subscription token that was charged last."
					},
					"at": {
						"type": "integer",
						"example": 1632960000,
						"description": "The time when the last payment was made. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					}
				},
				"required": ["amount", "at"]
			},
			"SubscriptionNextPayment": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"example": "50.0",
						"description": "The amount to be paid for the next billing cycle."
					},
					"at": {
						"type": "integer",
						"example": 1635552000,
						"description": "The time when the next payment is due. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					}
				},
				"required": ["amount", "at"]
			},
			"Wallet": {
				"type": "object",
				"properties": {
					"address": {
						"type": "string",
						"example": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B",
						"description": "The address of the wallet."
					},
					"chain": {
						"example": "ethereum",
						"description": "The chain of the wallet.",
						"$ref": "#/components/schemas/Chain"
					},
					"token": {
						"example": "usdc",
						"description": "The token of the wallet.",
						"$ref": "#/components/schemas/Token"
					}
				},
				"required": ["address", "chain", "token"]
			},
			"PaymentMethodSubscription": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "pm_abaJW5279WhxsVAX",
						"description": "Unique identifier for the payment method."
					},
					"object": {
						"type": "string",
						"enum": ["payment_method"],
						"default": "payment_method",
						"example": "payment_method",
						"minimum": 1
					},
					"created_at": {
						"type": "integer",
						"example": 1632960000,
						"description": "The time when the payment method was created. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"customer_id": {
						"type": "string",
						"nullable": true,
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "The ID of the customer that the payment method belongs to."
					},
					"description": {
						"type": "string",
						"minLength": 2,
						"nullable": true,
						"example": "Wallet A",
						"description": "A description for the payment method."
					},
					"metadata": {
						"type": "object",
						"nullable": true,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": true,
						"description": "External reference for the entity.",
						"example": null
					},
					"type": {
						"example": "wallet",
						"description": "The type of the payment method.",
						"$ref": "#/components/schemas/PaymentMethodType"
					},
					"updated_at": {
						"type": "integer",
						"example": 1632960000,
						"description": "The time when the payment method was updated. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"wallet": {
						"nullable": true,
						"description": "The associated wallet when the type is wallet",
						"allOf": [{ "$ref": "#/components/schemas/Wallet" }]
					}
				},
				"required": [
					"reference",
					"metadata",
					"id",
					"object",
					"type",
					"description",
					"customer_id",
					"created_at",
					"updated_at",
					"wallet"
				]
			},
			"Subscription": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "sub_LNlJW57B9WhzsVVP",
						"description": "Unique identifier for the subscription."
					},
					"object": {
						"type": "string",
						"enum": ["subscription"],
						"default": "subscription",
						"example": "subscription",
						"minimum": 1
					},
					"status": {
						"example": "active",
						"description": "The status of the subscription.",
						"$ref": "#/components/schemas/SubscriptionStatus"
					},
					"balance": {
						"description": "The balance of the subscription. This is the amount the user is owed, represented by positive number, or the amount the user owes, represented by a negative number.",
						"allOf": [{ "$ref": "#/components/schemas/SubscriptionBalance" }]
					},
					"billing": {
						"description": "Billing information for the subscription.",
						"allOf": [{ "$ref": "#/components/schemas/SubscriptionBilling" }]
					},
					"cancel_reason": {
						"nullable": true,
						"example": null,
						"description": "The reason for the subscription being canceled. Set by Diagonal automatically.",
						"$ref": "#/components/schemas/SubscriptionCancelReason"
					},
					"canceled_at": {
						"type": "integer",
						"nullable": true,
						"example": null,
						"description": "The time when the subscription transitioned to canceled. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"created_at": {
						"type": "integer",
						"example": 1632960000,
						"description": "The time when the subscription was created. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"customer_id": {
						"type": "string",
						"nullable": true,
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "The ID of the customer the subscription belongs to."
					},
					"last_payment": {
						"nullable": true,
						"description": "The last payment made for the subscription. This will be null if no payments have been made.",
						"allOf": [{ "$ref": "#/components/schemas/SubscriptionLastPayment" }]
					},
					"metadata": {
						"type": "object",
						"nullable": true,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.\n\nWhen using Diagonal Checkout the reference will automatically be set to the reference passed on checkout creation.",
						"example": null,
						"maxProperties": 20
					},
					"next_payment": {
						"nullable": true,
						"description": "The next payment of the subscription. This is null if the subscription is canceled.",
						"allOf": [{ "$ref": "#/components/schemas/SubscriptionNextPayment" }]
					},
					"past_due_since": {
						"type": "integer",
						"nullable": true,
						"example": null,
						"description": "The time when the subscription transitioned to past due. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"payment_method": {
						"nullable": true,
						"description": "The payment method used for the subscription.",
						"allOf": [{ "$ref": "#/components/schemas/PaymentMethodSubscription" }]
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": true,
						"description": "External reference for the entity. \n\nYou can use this field to track what the user is subscribed to. When using Diagonal Checkout the reference will automatically be set to the reference passed on checkout creation.",
						"example": null
					},
					"updated_at": {
						"type": "integer",
						"example": 1632960000,
						"description": "The time when the subscription was updated. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					}
				},
				"required": [
					"reference",
					"metadata",
					"id",
					"object",
					"status",
					"created_at",
					"updated_at",
					"past_due_since",
					"canceled_at",
					"cancel_reason",
					"balance",
					"next_payment",
					"last_payment",
					"billing",
					"payment_method",
					"customer_id"
				]
			},
			"PaginatedSubscription": {
				"type": "object",
				"properties": {
					"data": {
						"description": "The results in the given page.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/Subscription" }
					},
					"page": { "type": "number", "example": 1, "description": "Current page." },
					"page_count": { "type": "number", "example": 1, "description": "Total page count." },
					"results_count": {
						"type": "number",
						"example": 1,
						"description": "Total number of results for the given query."
					},
					"results_per_page": { "type": "number", "example": 20, "description": "Results per page." }
				},
				"required": ["page", "page_count", "results_per_page", "results_count", "data"]
			},
			"UpdateSubscriptionParameters": {
				"type": "object",
				"properties": {
					"billing_amount": {
						"type": "string",
						"description": "The new amount to charge for the subscription in the token being currently used.",
						"minimum": 0,
						"example": "20.0"
					},
					"billing_interval": {
						"description": "The billing interval to update the subscription to.",
						"$ref": "#/components/schemas/RecurringInterval"
					},
					"billing_interval_count": {
						"type": "integer",
						"minimum": 1,
						"maximum": 24,
						"description": "The billing interval count to update the subscription to."
					},
					"charge_behaviour": {
						"example": "immediate",
						"default": "immediate",
						"description": "The charge_behaviour parameter determines the timing of charges or credits resulting from an update to a subscription. The possible values for this parameter are:\n\n**`immediate`**: Charges or credits resulting from the update should be applied immediately to the current billing period.\n**`next_period`**:  Charges or credits resulting from the update should be applied to the next billing period.\n\nNote: This parameter does not affect any charges scheduled to be raised in future billing periods. Only to charges or credits resulting from the current update.",
						"$ref": "#/components/schemas/UpdateChargeBehaviour"
					},
					"metadata": {
						"type": "object",
						"nullable": false,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"payment_method_id": {
						"type": "string",
						"example": "pm_abaJW5279WhxsVAX",
						"description": "The ID of the new payment method that will be used for this subscription. It must be of the same type. For `wallets`, the `token` and `chain` must be the same."
					},
					"prorate": {
						"type": "boolean",
						"example": true,
						"description": "If the updated billing amount should be prorated. By default is `true`.",
						"default": true
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": false,
						"description": "External reference for the entity.",
						"example": null
					}
				}
			},
			"CancelSubscriptionParameters": {
				"type": "object",
				"properties": {
					"charge_behaviour": {
						"example": "immediate",
						"description": "When to charge any remaining amount yet to be paid by the customer. By default is `immediate`.\n\n**`none`**: Do not settle any outstanding amount the user owes. Such amount is then stored in the subscription balance.\n**`immediate`**: Charge any outstanding amount immediately.",
						"default": "immediate",
						"$ref": "#/components/schemas/CancelChargeBehaviour"
					},
					"end_of_period": {
						"type": "boolean",
						"example": true,
						"description": "Whether the subscription should be canceled immediatelly or at the end of the current billing cycle. By default is `true`.",
						"default": true
					},
					"prorate": {
						"type": "boolean",
						"example": true,
						"description": "Whether or not the remaining unused time should be credited. Only available when `end_of_period` is `false`. By default is `true`.",
						"default": true
					}
				}
			},
			"Event": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "event_LNlJW57B9WhzsVVP",
						"description": "Unique identifier for the event."
					},
					"object": { "type": "string", "enum": ["event"], "default": "event", "example": "event", "minimum": 1 },
					"created_at": {
						"type": "integer",
						"example": 1665053395,
						"description": "The time when the event was created. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"data": {
						"type": "object",
						"example": {
							"id": "sub_diDe1MOUkiQTFGdu",
							"object": "subscription",
							"status": "active",
							"balance": { "amount": "0.0", "updated_at": 1666634747 },
							"billing": { "amount": "100.0", "interval": "month", "interval_count": 1 },
							"created_at": 1666634747,
							"customer_id": "customer_jwQp70apggR4PRHS",
							"last_payment": { "amount": "100.0", "at": 1666634747 },
							"next_payment": { "amount": "100.0", "at": 1666634747 },
							"payment_method": {
								"id": "pm_YJ1IvIlUdJg6NNcd",
								"object": "payment_method",
								"created_at": 1666634747,
								"customer_id": "customer_jwQp70apggR4PRHS",
								"type": "wallet",
								"updated_at": 1666634747,
								"wallet": {
									"address": "0xEBb42A2AA2e27Fb8ac486290aC756d6B016Ab896",
									"chain": "ethereum",
									"token": "usdc"
								}
							},
							"updated_at": 1666634747
						},
						"description": "The event data."
					},
					"type": {
						"example": "subscription.active",
						"description": "The event type.",
						"$ref": "#/components/schemas/EventType"
					}
				},
				"required": ["id", "object", "created_at", "type", "data"]
			},
			"PaginatedEvent": {
				"type": "object",
				"properties": {
					"data": {
						"description": "The results in the given page.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/Event" }
					},
					"page": { "type": "number", "example": 1, "description": "Current page." },
					"page_count": { "type": "number", "example": 1, "description": "Total page count." },
					"results_count": {
						"type": "number",
						"example": 1,
						"description": "Total number of results for the given query."
					},
					"results_per_page": { "type": "number", "example": 20, "description": "Results per page." }
				},
				"required": ["page", "page_count", "results_per_page", "results_count", "data"]
			},
			"PaymentMethodWallet": {
				"type": "object",
				"properties": {
					"address": {
						"type": "string",
						"example": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B",
						"description": "The address of the wallet."
					},
					"balance": {
						"type": "string",
						"example": "321.23",
						"description": "The token balance in the customer wallet at the moment the payment method is requested."
					},
					"chain": {
						"example": "ethereum",
						"description": "The chain of the wallet.",
						"$ref": "#/components/schemas/Chain"
					},
					"spending_allowance": {
						"type": "string",
						"nullable": true,
						"example": "350230.0",
						"description": "The token allowance for the customer wallet at the moment the payment method is requested. When value is `null`, the value is considered infinte."
					},
					"token": {
						"example": "usdc",
						"description": "The token of the wallet.",
						"$ref": "#/components/schemas/Token"
					}
				},
				"required": ["address", "chain", "token", "balance", "spending_allowance"]
			},
			"PaymentMethod": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "pm_abaJW5279WhxsVAX",
						"description": "Unique identifier for the payment method."
					},
					"object": {
						"type": "string",
						"enum": ["payment_method"],
						"default": "payment_method",
						"example": "payment_method",
						"minimum": 1
					},
					"created_at": {
						"type": "integer",
						"example": 1632960000,
						"description": "The time when the payment method was created. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"customer_id": {
						"type": "string",
						"nullable": true,
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "The ID of the customer that the payment method belongs to."
					},
					"description": {
						"type": "string",
						"minLength": 2,
						"nullable": true,
						"example": "Wallet A",
						"description": "A description for the payment method."
					},
					"metadata": {
						"type": "object",
						"nullable": true,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": true,
						"description": "External reference for the entity.",
						"example": null
					},
					"type": {
						"example": "wallet",
						"description": "The type of the payment method.",
						"$ref": "#/components/schemas/PaymentMethodType"
					},
					"updated_at": {
						"type": "integer",
						"example": 1632960000,
						"description": "The time when the payment method was updated. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"wallet": {
						"nullable": true,
						"description": "The associated wallet when the type is wallet",
						"allOf": [{ "$ref": "#/components/schemas/PaymentMethodWallet" }]
					}
				},
				"required": [
					"reference",
					"metadata",
					"id",
					"object",
					"type",
					"description",
					"customer_id",
					"created_at",
					"updated_at",
					"wallet"
				]
			},
			"UpdatePaymentMethodParameters": {
				"type": "object",
				"properties": {
					"description": {
						"type": "string",
						"minLength": 2,
						"example": "Wallet A",
						"description": "The wallet description."
					},
					"metadata": {
						"type": "object",
						"nullable": false,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": false,
						"description": "External reference for the entity.",
						"example": null
					}
				}
			},
			"PaginatedPaymentMethod": {
				"type": "object",
				"properties": {
					"data": {
						"description": "The results in the given page.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/PaymentMethod" }
					},
					"page": { "type": "number", "example": 1, "description": "Current page." },
					"page_count": { "type": "number", "example": 1, "description": "Total page count." },
					"results_count": {
						"type": "number",
						"example": 1,
						"description": "Total number of results for the given query."
					},
					"results_per_page": { "type": "number", "example": 20, "description": "Results per page." }
				},
				"required": ["page", "page_count", "results_per_page", "results_count", "data"]
			},
			"SetupPaymentMethodWallet": {
				"type": "object",
				"properties": {
					"payment_options": {
						"nullable": true,
						"example": [{ "tokens": ["dai"], "chains": ["ethereum"] }],
						"description": "Payment options for the wallet.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/PaymentOptions" }
					}
				},
				"required": ["payment_options"]
			},
			"SetupPaymentMethodOptions": {
				"type": "object",
				"properties": {
					"wallet": {
						"nullable": true,
						"example": { "wallet": { "payment_options": [{ "tokens": ["dai"], "chains": ["ethereum"] }] } },
						"description": "Wallet payment method.",
						"allOf": [{ "$ref": "#/components/schemas/SetupPaymentMethodWallet" }]
					}
				},
				"required": ["wallet"]
			},
			"SetupSession": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "setup_qetOkUQV2vttGpCG",
						"description": "Unique identifier for the setup session."
					},
					"object": {
						"type": "string",
						"enum": ["setup_session"],
						"default": "setup_session",
						"example": "setup_session",
						"minimum": 1
					},
					"status": {
						"example": "open",
						"description": "Status for the setup session.",
						"$ref": "#/components/schemas/SetupSessionStatus"
					},
					"cancel_url": {
						"type": "string",
						"nullable": true,
						"example": "https://example.com/setup/cancel",
						"description": "URL where the user will be redirected after the setup session is cancelled.",
						"format": "url"
					},
					"customer_id": {
						"type": "string",
						"nullable": true,
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "The ID of the customer that the setup session is related to."
					},
					"expires_at": {
						"type": "integer",
						"example": 1665053395,
						"description": "The time when the setup session gets expired. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"metadata": {
						"type": "object",
						"nullable": true,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"payment_method_id": {
						"type": "string",
						"nullable": true,
						"example": "pm_abaJW5279WhxsVAX",
						"description": "The ID of the payment method that the setup session is related to."
					},
					"payment_method_options": {
						"nullable": true,
						"example": { "wallet": { "payment_options": [{ "tokens": ["dai"], "chains": ["ethereum"] }] } },
						"description": "Payment options for the setup session.",
						"allOf": [{ "$ref": "#/components/schemas/SetupPaymentMethodOptions" }]
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": true,
						"description": "External reference for the entity.",
						"example": null
					},
					"success_url": {
						"type": "string",
						"nullable": true,
						"example": "https://example.com/setup/success",
						"description": "URL where the user will be redirected after the setup session is completed.",
						"format": "url"
					},
					"url": {
						"type": "string",
						"example": "https://setup.diagonal.finance/setup_qetOkUQV2vttGpCG",
						"description": "URL for the setup session.",
						"format": "url"
					}
				},
				"required": [
					"reference",
					"metadata",
					"id",
					"object",
					"success_url",
					"cancel_url",
					"payment_method_options",
					"url",
					"payment_method_id",
					"status",
					"expires_at",
					"customer_id"
				]
			},
			"CreateSetupPaymentMethodWalletParameters": {
				"type": "object",
				"properties": {
					"payment_options": {
						"nullable": false,
						"example": [{ "tokens": ["dai"], "chains": ["ethereum"] }],
						"description": "Payment options for the wallet.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/PaymentOptions" }
					}
				}
			},
			"CreateSetupPaymentMethodOptionsParameters": {
				"type": "object",
				"properties": {
					"wallet": {
						"nullable": false,
						"example": { "wallet": { "payment_options": [{ "tokens": ["dai"], "chains": ["ethereum"] }] } },
						"description": "Wallet payment method.",
						"allOf": [{ "$ref": "#/components/schemas/CreateSetupPaymentMethodWalletParameters" }]
					}
				}
			},
			"CreateSetupSessionParameters": {
				"type": "object",
				"properties": {
					"cancel_url": {
						"type": "string",
						"example": "https://example.com/setup/cancel",
						"description": "URL where the user will be redirected after the setup session is cancelled.",
						"format": "url"
					},
					"customer": {
						"example": null,
						"description": "The customer the setup session will be related to.\n\n When the ID parameter is not provided, or not already assigned to an existing customer, the Customer is created. Otherwise, when the ID relates to an exiting Customer, the customer is updated with the provided values.",
						"allOf": [{ "$ref": "#/components/schemas/CreateCustomerParameters" }]
					},
					"expires_at": {
						"type": "integer",
						"example": 1665053395,
						"description": "The time when the Setup Session should expire. Measured in seconds since the Unix epoch. By default is 1h from request time.",
						"format": "uint32"
					},
					"metadata": {
						"type": "object",
						"nullable": false,
						"description": "Key-value pairs that can be attached to an object to store additional information about it in a structured format. \n\n You can add up to 20 key-value pairs. The key can be up to 40 characters long, and the value up to 300 characters long.\n\nThe metadata field in the payment method created through this setup session will be initialised with this value.",
						"example": { "external_customer_id": "id-01" },
						"maxProperties": 20
					},
					"payment_method_options": {
						"description": "Payment options for the setup session. If none provided, all payment method options set in the organization configuration will be used.",
						"allOf": [{ "$ref": "#/components/schemas/CreateSetupPaymentMethodOptionsParameters" }]
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"nullable": false,
						"description": "External reference for the entity.\n\nThe reference field in the payment method created through this setup session will be initialised with this value.",
						"example": "external-customer-id"
					},
					"success_url": {
						"type": "string",
						"example": "https://example.com/setup/success",
						"description": "URL where the user will be redirected after the setup session is completed.",
						"format": "url"
					}
				}
			},
			"ListChargesParameters": {
				"type": "object",
				"properties": {
					"status": {
						"description": "Only return charges with the specified status.",
						"example": "created",
						"$ref": "#/components/schemas/ChargeStatus"
					},
					"customer_id": {
						"type": "string",
						"minLength": 25,
						"maxLength": 25,
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "Only return charges from the specified customer ID."
					},
					"limit": {
						"type": "number",
						"default": 20,
						"minimum": 1,
						"maximum": 50,
						"example": 50,
						"description": "The limit per page."
					},
					"page": {
						"type": "number",
						"default": 1,
						"minimum": 1,
						"example": 1,
						"description": "The page number to fetch."
					},
					"payment_method_id": {
						"type": "string",
						"minLength": 19,
						"maxLength": 19,
						"example": "pm_abaJW5279WhxsVAX",
						"description": "Only return charges created to the specified payment method ID."
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"description": "Only return charges with the specified reference value.",
						"example": "HQHoe5e3V"
					},
					"subscription_id": {
						"type": "string",
						"minLength": 20,
						"maxLength": 20,
						"example": "sub_LNlJW57B9WhzsVVP",
						"description": "Only return charges belonging to the specified subscription ID."
					}
				}
			},
			"ListWebhookExecutionLogs": {
				"type": "object",
				"properties": {
					"from": {
						"type": "integer",
						"format": "uint32",
						"example": 1624580000,
						"description": "The start date of the range. Measured in seconds since the Unix epoch."
					},
					"limit": {
						"type": "number",
						"default": 20,
						"minimum": 1,
						"maximum": 50,
						"example": 50,
						"description": "The limit per page."
					},
					"page": {
						"type": "number",
						"default": 1,
						"minimum": 1,
						"example": 1,
						"description": "The page number to fetch."
					},
					"to": {
						"type": "integer",
						"format": "uint32",
						"example": 1624980000,
						"description": "The end date of the range. Measured in seconds since the Unix epoch."
					}
				}
			},
			"ListSubscriptionsParameters": {
				"type": "object",
				"properties": {
					"customer_id": {
						"type": "string",
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "Only return subscriptions belonging to the specified customer ID."
					},
					"limit": {
						"type": "number",
						"default": 20,
						"minimum": 1,
						"maximum": 50,
						"example": 50,
						"description": "The limit per page."
					},
					"page": {
						"type": "number",
						"default": 1,
						"minimum": 1,
						"example": 1,
						"description": "The page number to fetch."
					},
					"reference": {
						"type": "string",
						"minLength": 1,
						"maxLength": 200,
						"description": "Only return subscriptions with the specified reference",
						"example": null
					}
				}
			},
			"ListEventsParameters": {
				"type": "object",
				"properties": {
					"from": {
						"type": "integer",
						"example": 1624580000,
						"description": "The start date of the range. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"limit": {
						"type": "number",
						"default": 20,
						"minimum": 1,
						"maximum": 50,
						"example": 50,
						"description": "The limit per page."
					},
					"page": {
						"type": "number",
						"default": 1,
						"minimum": 1,
						"example": 1,
						"description": "The page number to fetch."
					},
					"to": {
						"type": "integer",
						"example": 1624980000,
						"description": "The end date of the range. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					}
				}
			},
			"ListPaymentMethodsParameters": {
				"type": "object",
				"properties": {
					"customer_id": {
						"type": "string",
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "The ID of the customer that the payment method belongs to."
					},
					"limit": {
						"type": "number",
						"default": 20,
						"minimum": 1,
						"maximum": 50,
						"example": 50,
						"description": "The limit per page."
					},
					"page": {
						"type": "number",
						"default": 1,
						"minimum": 1,
						"example": 1,
						"description": "The page number to fetch."
					},
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					}
				}
			},
			"ChargeSignatureData": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "charge_x6P5fBhG_RBG1ZpoiRziGN3sz7sQRxwb",
						"description": "Unique identifier for the charge."
					},
					"amount": { "type": "string", "example": "10.0", "description": "The amount to be charged." },
					"chain": {
						"example": "ethereum",
						"description": "The chain that the charge is being paid in.",
						"$ref": "#/components/schemas/Chain"
					},
					"chain_id": {
						"example": 1,
						"description": "The chain id that the charge is being paid in.",
						"$ref": "#/components/schemas/ChainId"
					},
					"organization_address": {
						"type": "string",
						"example": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B",
						"description": "The ethereum address of the organization contract that is going to receive the funds."
					},
					"source_address": {
						"type": "string",
						"example": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B",
						"description": "The ethereum address of the user that is paying for the charge."
					},
					"token": {
						"example": "usdc",
						"description": "The token that the charge is being paid in. All amounts are in this token.",
						"$ref": "#/components/schemas/Token"
					},
					"token_address": {
						"type": "string",
						"example": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
						"description": "The token address that the charge is being paid in. All amounts are in this token."
					},
					"token_amount": {
						"type": "string",
						"example": "10000000",
						"description": "The amount to be charged in the on-chain token format. This is the value used for the signature digest."
					}
				},
				"required": [
					"id",
					"amount",
					"token",
					"token_address",
					"token_amount",
					"chain",
					"chain_id",
					"source_address",
					"organization_address"
				]
			},
			"SignatureData": {
				"type": "object",
				"properties": { "charge": { "$ref": "#/components/schemas/ChargeSignatureData" } },
				"required": ["charge"]
			},
			"Signature": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "sign_d7wCHQHovoe5e3VI",
						"description": "Unique identifier for the signature."
					},
					"object": {
						"type": "string",
						"enum": ["signature"],
						"default": "signature",
						"example": "signature",
						"minimum": 1
					},
					"data": { "description": "The signature data.", "allOf": [{ "$ref": "#/components/schemas/SignatureData" }] },
					"digest": {
						"type": "string",
						"example": "0x6bbdda8bc7786ffd5048d66711855470aaa058b5989adc5a89f4bb0f700ad5e9",
						"description": "The message digest to be signed."
					},
					"type": {
						"example": "charge",
						"description": "The type of the signature.",
						"$ref": "#/components/schemas/SignatureType"
					}
				},
				"required": ["id", "object", "type", "digest", "data"]
			}
		}
	},
	"security": [{ "X-API-Key": ["X-API-Key"] }]
}
