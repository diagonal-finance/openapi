{
	"openapi": "3.0.0",
	"paths": {
		"/v1/customers": {
			"post": {
				"operationId": "customers-create",
				"summary": "Create a customer",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateCustomerDto" } } }
				},
				"responses": {
					"201": {
						"description": "Created Customer object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrganizationCustomerDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Customers"]
			}
		},
		"/v1/customers/{id}": {
			"get": {
				"operationId": "customers-get",
				"summary": "Get a customer",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Customer object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrganizationCustomerDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Customer was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Customers"]
			},
			"put": {
				"operationId": "customers-update",
				"summary": "Update a customer",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateCustomerDto" } } }
				},
				"responses": {
					"200": {
						"description": "Updated Customer object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/OrganizationCustomerDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Customer was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Customers"]
			},
			"delete": {
				"operationId": "customers-delete",
				"summary": "Delete a customer",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Customer has been deleted successfully",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Customer was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Customers"]
			}
		},
		"/v1/charges/{id}": {
			"get": {
				"operationId": "charges-get",
				"summary": "Get a charge",
				"description": "Get a charge by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Charge object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ChargeDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Charge was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Charges"]
			},
			"put": {
				"operationId": "charges-update",
				"summary": "Update a charge",
				"description": "Update a charge by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateChargeDto" } } }
				},
				"responses": {
					"200": {
						"description": "Updated Charge object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ChargeDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Charge was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Charges"]
			}
		},
		"/v1/charges/{id}/capture": {
			"post": {
				"operationId": "charges-capture",
				"x-code-samples": [
					{
						"code": "const diagonal = require('@diagonal-fiance/sdk')('secret_iOFEAEckED0awiad1MDZZ2DKUHEtCP');\n\nconst charge = await diagonal.charges.capture(\n\t'charge_x6P5fBhG_RBG1ZpoiRziGN3sz7sQRxwb',\n\t{ v: 28, r: '0x28...', s: '0xf5...'}\n);",
						"install": "npm install @diagonal-finance/sdk",
						"language": "node",
						"name": "SDK"
					}
				],
				"summary": "Capture a charge",
				"description": "Capture a charge by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CaptureChargeDto" } } }
				},
				"responses": {
					"200": {
						"description": "Captured Charge object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ChargeDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Charge was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Charges"]
			}
		},
		"/v1/webhook/configs": {
			"post": {
				"operationId": "webhook-configs-create",
				"summary": "Create a webhook config",
				"description": "Create a new webhook config",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateWebhookConfigDto" } } }
				},
				"responses": {
					"201": {
						"description": "The created Webhook Config with secret",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreatedWebhookConfigDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Webhook Config"]
			},
			"get": {
				"operationId": "webhook-configs-list",
				"summary": "List webhook configs",
				"description": "List all webhook configs available.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "The retrieved webhook configs",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/WebhookConfigDto" } }
							}
						},
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Webhook Config"]
			}
		},
		"/v1/webhook/configs/{id}": {
			"get": {
				"operationId": "webhook-configs-get",
				"summary": "Get a webhook config",
				"description": "Get a webhook config by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Webhook Config object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebhookConfigDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Webhook config was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Webhook Config"]
			},
			"put": {
				"operationId": "webhook-configs-update",
				"summary": "Update a webhook config",
				"description": "Update a webhook config if it exists",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateWebhookConfigDto" } } }
				},
				"responses": {
					"200": {
						"description": "The updated Webhook Config",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebhookConfigDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Webhook config was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Webhook Config"]
			},
			"delete": {
				"operationId": "webhook-configs-delete",
				"summary": "Delete a webhook config",
				"description": "Delete a webhook config if it exists",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "The deleted Webhook Config",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebhookConfigDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Webhook config was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Webhook Config"]
			}
		},
		"/v1/checkout/sessions": {
			"post": {
				"operationId": "checkout-sessions-create",
				"summary": "Create a checkout session",
				"description": "Create a new checkout session",
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateCheckoutSessionDto" } } }
				},
				"responses": {
					"201": {
						"description": "Created Checkout Session object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CheckoutSessionDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Checkout Sessions"]
			}
		},
		"/v1/checkout/sessions/{id}": {
			"get": {
				"operationId": "checkout-sessions-get",
				"summary": "Get a checkout session",
				"description": "Get a checkout session by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Checkout Session object",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						},
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CheckoutSessionDto" } } }
					},
					"404": {
						"description": "Checkout session was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Checkout Sessions"]
			}
		},
		"/v1/checkout/sessions/{id}/expire": {
			"post": {
				"operationId": "checkout-sessions-expire",
				"summary": "Expire a checkout session",
				"description": "Expire a checkout session by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Expired Checkout Session object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CheckoutSessionDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Checkout session was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Checkout Sessions"]
			}
		},
		"/v1/webhook/logs": {
			"get": {
				"operationId": "webhook-logs-list",
				"summary": "List webhook execution logs",
				"description": "List webhook execution logs within a time range.",
				"parameters": [
					{
						"name": "from",
						"required": true,
						"in": "query",
						"description": "The start date of the range. Measured in seconds since the Unix epoch.",
						"schema": { "type": "number" }
					},
					{
						"name": "to",
						"required": true,
						"in": "query",
						"description": "The end date of the range. Measured in seconds since the Unix epoch.",
						"schema": { "type": "number" }
					},
					{
						"name": "limit",
						"required": true,
						"in": "query",
						"description": "The number of logs to return. Minimum is 1 and max 50.",
						"schema": { "type": "number" }
					}
				],
				"responses": {
					"200": {
						"description": "The retrieved webhook execution logs",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/WebhookExecutionLogDto" } }
							}
						},
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Webhook Logs"]
			}
		},
		"/v1/subscriptions/{id}": {
			"get": {
				"operationId": "subscriptions-get",
				"summary": "Get a subscription",
				"description": "Gets a subscription by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "Subscription object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/SubscriptionDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Subscription was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Subscriptions"]
			},
			"post": {
				"operationId": "subscriptions-update",
				"summary": "Update a subscription",
				"description": "Updates a subscription by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateSubscriptionDto" } } }
				},
				"responses": {
					"200": {
						"description": "The updated Subscription object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/SubscriptionDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Subscription was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Subscriptions"]
			}
		},
		"/v1/subscriptions/{id}/cancel": {
			"post": {
				"operationId": "subscriptions-cancel",
				"summary": "Cancel a subscription",
				"description": "Cancel a given subscription by id",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"requestBody": {
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/CancelSubscriptionDto" } } }
				},
				"responses": {
					"200": {
						"description": "The canceled Subscription object",
						"content": { "application/json": { "schema": { "$ref": "#/components/schemas/SubscriptionDto" } } },
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					},
					"404": {
						"description": "Subscription was not found",
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Subscriptions"]
			}
		},
		"/v1/events/{id}": {
			"get": {
				"operationId": "events-get",
				"summary": "Get an event",
				"description": "Get an event by id.",
				"parameters": [{ "name": "id", "required": true, "in": "path", "schema": { "type": "string" } }],
				"responses": {
					"200": {
						"description": "The retrieved event",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/EventDto" } }
							}
						},
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Events"]
			}
		},
		"/v1/events": {
			"get": {
				"operationId": "events-list",
				"summary": "List events",
				"description": "List events within a time range.",
				"parameters": [
					{
						"name": "from",
						"required": true,
						"in": "query",
						"description": "The start date of the range. Measured in seconds since the Unix epoch.",
						"schema": { "type": "number" }
					},
					{
						"name": "to",
						"required": true,
						"in": "query",
						"description": "The end date of the range. Measured in seconds since the Unix epoch.",
						"schema": { "type": "number" }
					},
					{
						"name": "limit",
						"required": true,
						"in": "query",
						"description": "The number of events to return. Minimum is 1 and max 50.",
						"schema": { "type": "number" }
					}
				],
				"responses": {
					"200": {
						"description": "List of events.",
						"content": {
							"application/json": {
								"schema": { "type": "array", "items": { "$ref": "#/components/schemas/EventDto" } }
							}
						},
						"headers": {
							"X-Request-Id": {
								"schema": { "type": "string" },
								"description": "Unique identifier for the request.",
								"example": "req_N6SsgoiaOQOPqsYKKiw5",
								"required": true
							}
						}
					}
				},
				"tags": ["Events"]
			}
		}
	},
	"info": { "title": "API", "description": "Diagonal API", "version": "1.0", "contact": {} },
	"tags": [],
	"servers": [{ "url": "https://api.test.diagonal.finance" }],
	"components": {
		"securitySchemes": {
			"X-API-Key": { "type": "apiKey", "in": "header", "name": "X-API-Key", "description": "Diagonal API Key" }
		},
		"schemas": {
			"CreateCustomerDto": {
				"type": "object",
				"properties": {
					"email": { "type": "string", "example": "john@example.com", "description": "The customer's email address." },
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"name": { "type": "string", "example": "John", "description": "The customer's full name." },
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					}
				}
			},
			"OrganizationCustomerDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "Unique identifier for the customer."
					},
					"object": {
						"type": "string",
						"enum": ["customer"],
						"default": "customer",
						"example": "customer",
						"minimum": 1
					},
					"email": { "type": "string", "example": "john@example.com", "description": "The customer's email address." },
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"name": { "type": "string", "example": "John", "description": "The customer's full name." },
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					}
				},
				"required": ["id", "object"]
			},
			"UpdateCustomerDto": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"example": "jane@example.com",
						"description": "The new customer's email address."
					},
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"name": { "type": "string", "example": "Jane", "description": "The new customer's full name." },
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					}
				}
			},
			"ChargeStatus": {
				"type": "string",
				"enum": [
					"created",
					"waiting_for_signature",
					"signed",
					"processing",
					"confirmed",
					"finalized",
					"pending",
					"failed",
					"voided"
				],
				"properties": {}
			},
			"Token": { "type": "string", "enum": ["dai", "usdc"], "properties": {} },
			"Chain": { "type": "string", "enum": ["ethereum", "goerli"], "properties": {} },
			"ChargeFailureReason": {
				"type": "string",
				"enum": [
					"insufficient_allowance",
					"insufficient_balance",
					"address_blacklisted",
					"contract_paused",
					"invalid_owner_address",
					"invalid_permit_signature",
					"expired_permit",
					"invalid_nonce",
					"internal_error"
				],
				"properties": {}
			},
			"ChargeDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "charge_x6P5fBhG_RBG1ZpoiRziGN3sz7sQRxwb",
						"description": "Unique identifier for the charge."
					},
					"object": { "type": "string", "enum": ["charge"], "default": "charge", "example": "charge", "minimum": 1 },
					"status": {
						"example": "finalized",
						"description": "The status of the charge.",
						"$ref": "#/components/schemas/ChargeStatus"
					},
					"amount": { "type": "string", "example": "10.0", "description": "The amount to be charged." },
					"attempt_count": {
						"type": "number",
						"example": 1,
						"description": "The number of times the charge has been attempted."
					},
					"chain": {
						"example": "ethereum",
						"description": "The chain that the charge is being paid in.",
						"$ref": "#/components/schemas/Chain"
					},
					"confirmed_at": {
						"type": "integer",
						"example": 1665054008,
						"description": "The time when the charge was confirmed. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"customer_id": {
						"type": "string",
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "The ID of the customer that the charge is related to."
					},
					"description": { "type": "string", "example": null, "description": "A description for the charge." },
					"failed_at": {
						"type": "integer",
						"example": null,
						"description": "The time when the charge was failed. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"finalized_at": {
						"type": "integer",
						"example": 1665054030,
						"description": "The time when the charge was finalized. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"last_attempt_at": {
						"type": "integer",
						"example": null,
						"description": "The time when the charge was last attempted. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"last_attempt_failure_reason": {
						"example": null,
						"description": "The failure reason for the last attempt.",
						"$ref": "#/components/schemas/ChargeFailureReason"
					},
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"name": { "type": "string", "example": null, "description": "A name for the charge." },
					"next_attempt_at": {
						"type": "integer",
						"example": null,
						"description": "The time when the charge is going to be attempted again. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					},
					"requested_at": {
						"type": "integer",
						"example": 1665053001,
						"description": "The time when the charge signature was requested. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"signature_id": {
						"type": "string",
						"example": "sign_d7wCHQHovoe5e3VI",
						"description": "The ID of the signature used for capturing the charge."
					},
					"signed_at": {
						"type": "integer",
						"example": 1665054004,
						"description": "The time when the charge was signed. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"source_address": {
						"type": "string",
						"example": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B",
						"description": "The ethereum address of the user that is paying for the charge."
					},
					"subscription_id": {
						"type": "string",
						"example": "sub_LNlJW57B9WhzsVVP",
						"description": "The ID of the subscription that the charge is related with."
					},
					"token": {
						"example": "usdc",
						"description": "The token that the charge is being paid in. All amounts are in this token.",
						"$ref": "#/components/schemas/Token"
					},
					"transaction": {
						"type": "string",
						"example": "0x17134e4a80e688d4c6d754d674bb06f3a65996dd1ec95ebe41fdea1c9e4380cd",
						"description": "The ethereum transaction hash of the charge."
					},
					"voided_at": {
						"type": "number",
						"example": null,
						"description": "The time when the charge was voided. Measured in seconds since the Unix epoch."
					}
				},
				"required": [
					"id",
					"object",
					"status",
					"subscription_id",
					"source_address",
					"amount",
					"token",
					"chain",
					"signature_id",
					"attempt_count"
				]
			},
			"UpdateChargeDto": {
				"type": "object",
				"properties": {
					"description": { "type": "string", "example": null, "description": "A description for the charge." },
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"name": { "type": "string", "example": null, "description": "A name for the charge." },
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					}
				}
			},
			"ECDSASignature": {
				"type": "object",
				"properties": {
					"r": {
						"type": "string",
						"example": "0x1234567890123456789012345678901234567890123456789012345678901234",
						"description": "The r property of the v,r,s signature."
					},
					"s": {
						"type": "string",
						"example": "0x1234567890123456789012345678901234567890123456789012345678901234",
						"description": "The s property of the v,r,s signature."
					},
					"v": {
						"type": "integer",
						"example": 28,
						"description": "The v property of the v,r,s signature.",
						"minimum": 27,
						"maximum": 28
					}
				},
				"required": ["v", "r", "s"]
			},
			"CaptureChargeDto": {
				"type": "object",
				"properties": {
					"signature": {
						"title": "ECDSA signature",
						"description": "Charge ECDSA signature in v,r,s format. This is used in order to execute the on-chain charge.",
						"allOf": [{ "$ref": "#/components/schemas/ECDSASignature" }]
					}
				},
				"required": ["signature"]
			},
			"ApplicationEventTypes": {
				"type": "string",
				"enum": [
					"subscription.created",
					"subscription.active",
					"subscription.updated",
					"subscription.canceled",
					"charge.created",
					"charge.confirmed",
					"charge.finalised",
					"charge.attempt_failed",
					"charge.failed",
					"signature.charge.request"
				],
				"properties": {}
			},
			"CreateWebhookConfigDto": {
				"type": "object",
				"properties": {
					"events": {
						"type": "array",
						"example": ["charge.confirmed", "charge.failed"],
						"description": "Events that the webhook endpoint will be triggered for.",
						"items": { "$ref": "#/components/schemas/ApplicationEventTypes" }
					},
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					},
					"url": {
						"type": "string",
						"example": "http://example.com/webhook",
						"description": "The URL that should be triggered by Diagonal for delivering the webhook event.",
						"format": "url"
					}
				},
				"required": ["url", "events"]
			},
			"CreatedWebhookConfigDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "wconfig_3E0tXcp4p3cbsh8POoU0",
						"description": "Unique identifier for the webhook config."
					},
					"object": {
						"type": "string",
						"enum": ["webhook.config"],
						"default": "webhook.config",
						"example": "webhook.config",
						"minimum": 1
					},
					"created_at": {
						"type": "integer",
						"example": 1624980000,
						"description": "The time when the webhook config was created. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"events": {
						"type": "array",
						"example": ["charge.confirmed", "charge.failed"],
						"description": "Events that the webhook endpoint will be triggered for.",
						"items": { "$ref": "#/components/schemas/ApplicationEventTypes" }
					},
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					},
					"secret": {
						"type": "string",
						"example": "wsecret_YC20fhSM_q9tdQKxfggXursa4JAuEh55giGALTwl",
						"description": "The webhook secret used to generate webhook signatures. Only returned at creation."
					},
					"url": {
						"type": "string",
						"example": "https://example.com/webhook",
						"description": "The URL that should be triggered by Diagonal for delivering the webhook event.",
						"format": "url"
					}
				},
				"required": ["id", "object", "url", "events", "created_at", "secret"]
			},
			"WebhookConfigDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "wconfig_3E0tXcp4p3cbsh8POoU0",
						"description": "Unique identifier for the webhook config."
					},
					"object": {
						"type": "string",
						"enum": ["webhook.config"],
						"default": "webhook.config",
						"example": "webhook.config",
						"minimum": 1
					},
					"created_at": {
						"type": "integer",
						"example": 1624980000,
						"description": "The time when the webhook config was created. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"events": {
						"type": "array",
						"example": ["charge.confirmed", "charge.failed"],
						"description": "Events that the webhook endpoint will be triggered for.",
						"items": { "$ref": "#/components/schemas/ApplicationEventTypes" }
					},
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					},
					"url": {
						"type": "string",
						"example": "https://example.com/webhook",
						"description": "The URL that should be triggered by Diagonal for delivering the webhook event.",
						"format": "url"
					}
				},
				"required": ["id", "object", "url", "events", "created_at"]
			},
			"UpdateWebhookConfigDto": {
				"type": "object",
				"properties": {
					"events": {
						"type": "array",
						"example": ["charge.confirmed", "charge.failed"],
						"description": "Events that the webhook endpoint will be triggered for.",
						"items": { "$ref": "#/components/schemas/ApplicationEventTypes" }
					},
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					},
					"url": {
						"type": "string",
						"example": "http://example.com/webhook2",
						"description": "The URL that should be triggered by Diagonal for delivering the webhook event.",
						"format": "url"
					}
				},
				"required": ["url", "events"]
			},
			"RecurringInterval": { "type": "string", "enum": ["month", "year"], "properties": {} },
			"CreateCheckoutSessionSubscription": {
				"type": "object",
				"properties": {
					"interval": {
						"example": "month",
						"description": "Reccuring interval for the subscription.",
						"$ref": "#/components/schemas/RecurringInterval"
					},
					"interval_count": {
						"type": "integer",
						"minimum": 1,
						"example": 1,
						"description": "Number of interval units that the subscription should be active for."
					},
					"trial_days": {
						"type": "integer",
						"minimum": 1,
						"example": 1,
						"description": "Number of trial days the subscription is eligible for."
					}
				},
				"required": ["interval", "interval_count"]
			},
			"CreateCheckoutSessionPaymentOptionsConfig": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"description": "Amount to pay for this combination of Chain(s) and Token(s).",
						"example": "10"
					},
					"chains": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/Chain" },
						"description": "Chain names where the subscription can be payed in.",
						"example": ["ethereum"],
						"enum": ["ethereum", "goerli"]
					},
					"tokens": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/Token" },
						"description": "Token names available to pay for the subscription.",
						"example": ["dai"],
						"enum": ["dai", "usdc"]
					}
				}
			},
			"CreateCheckoutSessionDto": {
				"type": "object",
				"properties": {
					"amount": { "type": "string", "example": "10", "description": "Total amount to pay for the subscription." },
					"cancel_url": {
						"type": "string",
						"example": "https://example.com/checkout/cancel",
						"description": "URL where the user will be redirected after the checkout session is cancelled.",
						"format": "url"
					},
					"customer_id": {
						"type": "string",
						"example": null,
						"description": "The ID of the customer that the checkout session is related to."
					},
					"expires_at": {
						"type": "integer",
						"example": 1665053395,
						"description": "The time when the Checkout Session should expire. By default is 24h.",
						"format": "uint32"
					},
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"optimistic_redirect": {
						"type": "boolean",
						"default": true,
						"example": true,
						"description": "A flag that indicates if the user should be redirected to the success URL after the checkout session is completed without waiting for the payment to be confirmed."
					},
					"payment_options": {
						"description": "Payment options for the checkout session. If none provided, all payment options set in the organization configuration will be used.\n\nFor each configuration, either chains or tokens must be provided.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/CreateCheckoutSessionPaymentOptionsConfig" }
					},
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					},
					"subscription": {
						"description": "Subscription information for the checkout session.",
						"allOf": [{ "$ref": "#/components/schemas/CreateCheckoutSessionSubscription" }]
					},
					"success_url": {
						"type": "string",
						"example": "https://example.com/checkout/success",
						"description": "URL where the user will be redirected after the checkout session is completed.",
						"format": "url"
					}
				},
				"required": ["success_url", "cancel_url", "amount", "subscription"]
			},
			"CheckoutSessionSubscription": {
				"type": "object",
				"properties": {
					"interval": {
						"example": "month",
						"description": "Reccuring interval for the subscription.",
						"$ref": "#/components/schemas/RecurringInterval"
					},
					"interval_count": {
						"type": "integer",
						"minimum": 1,
						"example": 1,
						"description": "Number of interval units that the subscription should be active for."
					},
					"trial_days": {
						"type": "integer",
						"example": 0,
						"description": "Number of trial days the subscription is eligible for."
					}
				},
				"required": ["interval", "interval_count", "trial_days"]
			},
			"CheckoutSessionPaymentOptionsConfig": {
				"type": "object",
				"properties": {
					"amount": { "type": "string", "description": "The subscription amount." },
					"chains": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/Chain" },
						"description": "The valid chains that the user can use to pay for the subscription.",
						"enum": ["ethereum", "goerli"]
					},
					"tokens": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/Token" },
						"description": "The valid tokens that the user can use to pay for the subscription.",
						"enum": ["dai", "usdc"]
					}
				}
			},
			"CheckoutSessionStatus": { "type": "string", "enum": ["open", "expired", "complete"], "properties": {} },
			"CheckoutSessionDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "cs_qetOkUQV2vttGpCG",
						"description": "Unique identifier for the checkout session."
					},
					"object": {
						"type": "string",
						"enum": ["checkout.session"],
						"default": "checkout.session",
						"example": "checkout.session",
						"minimum": 1
					},
					"status": {
						"example": "open",
						"description": "Status for the checkout session.",
						"$ref": "#/components/schemas/CheckoutSessionStatus"
					},
					"amount": { "type": "string", "example": "10.0", "description": "Checkout session amount." },
					"cancel_url": {
						"type": "string",
						"example": "https://example.com/checkout/cancel",
						"description": "URL where the user will be redirected after the checkout session is cancelled.",
						"format": "url"
					},
					"customer_id": {
						"type": "string",
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "The ID of the customer that the checkout session is related to."
					},
					"expires_at": {
						"type": "integer",
						"example": 1665053395,
						"description": "The time when the checkout session gets expired. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"optimistic_redirect": {
						"type": "boolean",
						"default": true,
						"example": true,
						"description": "A flag that indicates if the user should be redirected to the success URL after the checkout session is completed, without waiting for the payment to be confirmed."
					},
					"payment_options": {
						"example": [{ "tokens": ["dai"], "chains": ["ethereum"], "amount": "12.0" }],
						"description": "Payment options for the checkout session.",
						"type": "array",
						"items": { "$ref": "#/components/schemas/CheckoutSessionPaymentOptionsConfig" }
					},
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					},
					"subscription": {
						"description": "Subscription information for the checkout session.",
						"allOf": [{ "$ref": "#/components/schemas/CheckoutSessionSubscription" }]
					},
					"subscription_id": {
						"type": "string",
						"example": "sub_w2wCHQHaaoe5e3RM",
						"description": "The ID of the subscription that the checkout session is related to."
					},
					"success_url": {
						"type": "string",
						"example": "https://example.com/checkout/success",
						"description": "URL where the user will be redirected after the checkout session is completed.",
						"format": "url"
					},
					"url": {
						"type": "string",
						"example": "https://checkout.diagonal.finance/cs_qetOkUQV2vttGpCG",
						"description": "URL for the checkout session.",
						"format": "url"
					}
				},
				"required": [
					"id",
					"object",
					"success_url",
					"cancel_url",
					"amount",
					"subscription",
					"url",
					"status",
					"expires_at"
				]
			},
			"WebhookExecutionLogDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "wexec_LNlJW57B9WhzsVVP",
						"description": "Unique identifier for the webhook execution log."
					},
					"object": {
						"type": "string",
						"enum": ["webhook.log"],
						"default": "webhook.log",
						"example": "webhook.log",
						"minimum": 1
					},
					"event_id": {
						"type": "string",
						"example": "event_FenzzAXzOv1O5-GWFTAjCNCW9bwp29eK",
						"description": "The ID of the webhook event."
					},
					"occured_at": {
						"type": "integer",
						"example": 1633046400,
						"description": "The time when the webhook was executed. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"response_code": { "type": "integer", "example": 200, "description": "The HTTP response status code." },
					"response_text": {
						"type": "string",
						"example": "{\"status\": \"success\"}",
						"description": "Stringified HTTP response body."
					},
					"url": {
						"type": "string",
						"example": "http://example.com/webhook",
						"description": "The URL that was triggered for delivering the webhook.",
						"format": "url"
					}
				},
				"required": ["id", "object", "event_id", "url", "response_code", "response_text", "occured_at"]
			},
			"SubscriptionStatus": {
				"type": "string",
				"enum": ["incomplete", "trialing", "active", "past_due", "canceled", "canceling", "expired"],
				"properties": {}
			},
			"SubscriptionBalanceDto": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"example": "0.0",
						"description": "The balance amount in the token being used for the subscription."
					},
					"updated_at": {
						"type": "integer",
						"example": 1632960000,
						"description": "The time when the balance was last updated. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					}
				},
				"required": ["amount", "updated_at"]
			},
			"SubscriptionNextPaymentDto": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"example": "50.0",
						"description": "The amount to be paid for the next billing cycle."
					},
					"at": {
						"type": "integer",
						"example": 1635552000,
						"description": "The time when the next payment is due. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					}
				},
				"required": ["amount", "at"]
			},
			"SubscriptionLastPaymentDto": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"example": "50.0",
						"description": "The amount in the subscription token that was charged last."
					},
					"at": {
						"type": "integer",
						"example": 1632960000,
						"description": "The time when the last payment was made. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					}
				},
				"required": ["amount", "at"]
			},
			"SubscriptionPaymentInformationDto": {
				"type": "object",
				"properties": {
					"address": {
						"type": "string",
						"example": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B",
						"description": "The address of the user that is paying for the subscription."
					},
					"chain": {
						"example": "ethereum",
						"description": "The chain that the subscription is being paid on.",
						"$ref": "#/components/schemas/Chain"
					},
					"token": {
						"example": "usdc",
						"description": "The token that the subscription is being paid in. All amounts are in this token.",
						"$ref": "#/components/schemas/Token"
					}
				},
				"required": ["address", "token", "chain"]
			},
			"SubscriptionBillingDto": {
				"type": "object",
				"properties": {
					"amount": {
						"type": "string",
						"example": "50.0",
						"description": "The amount in the subscription token that will be charged each billing interval."
					},
					"interval": {
						"example": "month",
						"description": "The billing interval of the subscription.",
						"$ref": "#/components/schemas/RecurringInterval"
					},
					"interval_count": {
						"type": "integer",
						"minimum": 1,
						"example": 1,
						"description": "The billing interval count of the subscription."
					}
				},
				"required": ["amount", "interval", "interval_count"]
			},
			"SubscriptionDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "sub_LNlJW57B9WhzsVVP",
						"description": "Unique identifier for the subscription."
					},
					"object": {
						"type": "string",
						"enum": ["subscription"],
						"default": "subscription",
						"example": "subscription",
						"minimum": 1
					},
					"status": {
						"example": "active",
						"description": "The status of the subscription.",
						"$ref": "#/components/schemas/SubscriptionStatus"
					},
					"balance": {
						"description": "The balance of the subscription. This is the amount the user is owed, represented by positive number, or the amount the user owes, represented by a negative number.",
						"allOf": [{ "$ref": "#/components/schemas/SubscriptionBalanceDto" }]
					},
					"billing": { "$ref": "#/components/schemas/SubscriptionBillingDto" },
					"canceled_at": {
						"type": "integer",
						"example": null,
						"description": "The time when the subscription transitioned to canceled. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"created_at": {
						"type": "integer",
						"example": 1632960000,
						"description": "The time when the subscription was created. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"customer_id": {
						"type": "string",
						"example": "customer_d7wCHQHovoe5e3VI",
						"description": "The ID of the customer that the subscription belongs to. When no customer has been provided during the checkout this will be null."
					},
					"last_payment": {
						"description": "The last payment made for the subscription. This will be null if no payments have been made.",
						"allOf": [{ "$ref": "#/components/schemas/SubscriptionLastPaymentDto" }]
					},
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"next_payment": {
						"description": "The next payment of the subscription. This is null if the subscription is canceled.",
						"allOf": [{ "$ref": "#/components/schemas/SubscriptionNextPaymentDto" }]
					},
					"past_due_since": {
						"type": "integer",
						"example": null,
						"description": "The time when the subscription transitioned to past due. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"payment_information": {
						"description": "The payment information for the subscription.",
						"allOf": [{ "$ref": "#/components/schemas/SubscriptionPaymentInformationDto" }]
					},
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					},
					"updated_at": {
						"type": "integer",
						"example": 1632960000,
						"description": "The time when the subscription was updated. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					}
				},
				"required": ["id", "object", "status", "created_at", "updated_at", "balance", "payment_information", "billing"]
			},
			"UpdateChargeBehaviour": { "type": "string", "enum": ["immediate", "next_period"], "properties": {} },
			"UpdateSubscriptionDto": {
				"type": "object",
				"properties": {
					"billing_amount": {
						"type": "string",
						"description": "The new amount to charge for the subscription in the token being currently used.",
						"minimum": 0,
						"example": "20.0"
					},
					"billing_interval": {
						"description": "The billing interval interval to update the subscription to.",
						"$ref": "#/components/schemas/RecurringInterval"
					},
					"billing_interval_count": {
						"type": "integer",
						"minimum": 1,
						"description": "The billing interval count to update the subscription to."
					},
					"charge_behaviour": {
						"example": "immediate",
						"default": "immediate",
						"description": "When should the subscription be charged if a charge is required for the new billing amount. It is recommended to always set this to `immediate`.",
						"$ref": "#/components/schemas/UpdateChargeBehaviour"
					},
					"metadata": {
						"type": "object",
						"description": "Key-value pairs that can be attached to an object to store additional information about the object in a structured format. \n\n You can add up to 20 key-value pairs to an object. The key can be up to 40 characters long, and the value can be up to 300 characters long.",
						"example": null,
						"maxProperties": 20
					},
					"prorate": {
						"type": "boolean",
						"example": true,
						"description": "If the updated billing amount should be prorated. By default is `true`.",
						"default": true
					},
					"reference": {
						"type": "string",
						"maxLength": 200,
						"description": "External reference for the entity.",
						"example": null,
						"minLength": 1
					}
				}
			},
			"CancelChargeBehaviour": { "type": "string", "enum": ["immediate", "none"], "properties": {} },
			"CancelSubscriptionDto": {
				"type": "object",
				"properties": {
					"charge_behaviour": {
						"example": "immediate",
						"description": "When should any remaining amount yet to be paid be charged. It is recommended to always set this to `immediate`.",
						"default": "immediate",
						"$ref": "#/components/schemas/CancelChargeBehaviour"
					},
					"end_of_period": {
						"type": "boolean",
						"example": true,
						"description": "Whether the subscription should be canceled immediatelly or at the end of the current billing cycle.",
						"default": true
					}
				}
			},
			"EventDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "event_LNlJW57B9WhzsVVP",
						"description": "Unique identifier for the event."
					},
					"object": { "type": "string", "enum": ["event"], "default": "event", "example": "event", "minimum": 1 },
					"created_at": {
						"type": "integer",
						"example": 1665053395,
						"description": "The time when the event was created. Measured in seconds since the Unix epoch.",
						"format": "uint32"
					},
					"data": {
						"type": "object",
						"example": {
							"id": "sub_123456",
							"object": "subscription",
							"status": "active",
							"balance": { "amount": "0.0", "updated_at": 1666634747 },
							"billing": { "amount": "100.0", "interval": "month", "interval_count": 1 },
							"created_at": 1666634747,
							"customer_id": "customer_123456",
							"last_payment": { "amount": "100.0", "at": 1666634747 },
							"next_payment": { "amount": "100.0", "at": 1666634747 },
							"payment_information": {
								"address": "0xEBb42A2AA2e27Fb8ac486290aC756d6B016Ab896",
								"chain": "goerli",
								"token": "usdc"
							},
							"updated_at": 1666634747
						},
						"description": "The event data."
					},
					"type": {
						"type": "string",
						"example": "subscription.active",
						"description": "The event type.",
						"enum": [
							"subscription.created",
							"subscription.active",
							"subscription.updated",
							"subscription.canceled",
							"charge.created",
							"charge.confirmed",
							"charge.finalised",
							"charge.attempt_failed",
							"charge.failed"
						]
					}
				},
				"required": ["id", "object", "created_at", "type", "data"]
			},
			"SignatureType": { "type": "string", "enum": ["charge"], "properties": {} },
			"ChainId": { "type": "integer", "enum": [1, 5], "properties": {} },
			"ChargeSignaturePayloadDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "charge_x6P5fBhG_RBG1ZpoiRziGN3sz7sQRxwb",
						"description": "Unique identifier for the charge."
					},
					"amount": { "type": "string", "example": "10.0", "description": "The amount to be charged." },
					"chain": {
						"example": "ethereum",
						"description": "The chain that the charge is being paid in.",
						"$ref": "#/components/schemas/Chain"
					},
					"chain_id": {
						"example": 1,
						"description": "The chain id that the charge is being paid in.",
						"$ref": "#/components/schemas/ChainId"
					},
					"organization_address": {
						"type": "string",
						"example": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B",
						"description": "The ethereum address of the organization contract that is going to receive the funds."
					},
					"source_address": {
						"type": "string",
						"example": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B",
						"description": "The ethereum address of the user that is paying for the charge."
					},
					"token": {
						"example": "usdc",
						"description": "The token that the charge is being paid in. All amounts are in this token.",
						"$ref": "#/components/schemas/Token"
					},
					"token_address": {
						"type": "string",
						"example": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
						"description": "The token address that the charge is being paid in. All amounts are in this token."
					},
					"token_amount": {
						"type": "string",
						"example": "10000000",
						"description": "The amount to be charged in the on-chain token format. This is the value used for the signature digest."
					}
				},
				"required": [
					"id",
					"amount",
					"token",
					"token_address",
					"token_amount",
					"chain",
					"chain_id",
					"source_address",
					"organization_address"
				]
			},
			"SignatureDataDto": {
				"type": "object",
				"properties": { "charge": { "$ref": "#/components/schemas/ChargeSignaturePayloadDto" } },
				"required": ["charge"]
			},
			"SignatureDto": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "sign_d7wCHQHovoe5e3VI",
						"description": "Unique identifier for the signature."
					},
					"object": {
						"type": "string",
						"enum": ["signature"],
						"default": "signature",
						"example": "signature",
						"minimum": 1
					},
					"data": {
						"description": "The signature data.",
						"allOf": [{ "$ref": "#/components/schemas/SignatureDataDto" }]
					},
					"digest": {
						"type": "string",
						"example": "0x6bbdda8bc7786ffd5048d66711855470aaa058b5989adc5a89f4bb0f700ad5e9",
						"description": "The message digest to be signed."
					},
					"type": {
						"example": "charge",
						"description": "The type of the signature.",
						"$ref": "#/components/schemas/SignatureType"
					}
				},
				"required": ["id", "object", "type", "digest", "data"]
			},
			"Objects": {
				"type": "string",
				"enum": [
					"charge",
					"customer",
					"signature",
					"subscription",
					"stream",
					"webhook.config",
					"webhook.log",
					"event",
					"checkout.session"
				],
				"properties": {}
			},
			"ErrorCategory": {
				"type": "string",
				"enum": [
					"internal",
					"authorization",
					"organization",
					"subscription",
					"checkout.session",
					"charge",
					"event",
					"customer",
					"webhook.log",
					"webhook.config"
				],
				"properties": {}
			},
			"ErrorType": { "type": "string", "enum": ["internal", "request"], "properties": {} }
		}
	},
	"security": [{ "X-API-Key": ["X-API-Key"] }],
	"x-readme": { "samples-languages": ["curl", "node", "go", "python", "java"] }
}
